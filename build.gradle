plugins {
	id 'io.spring.dependency-management' apply false
	id 'net.parostroj.versioning'
	id 'com.github.ben-manes.versions'
	id 'se.ascp.gradle.gradle-versions-filter'
}

def nonJavaProjectsFilter = [
	"grafikon-assembly",
	"grafikon-webstart"
]

def outputJavaVersion = (project.findProperty('javaVersion') ?: 17) as int

subprojects { prj ->
	apply plugin: 'io.spring.dependency-management'

	group = 'net.parostroj'
	version = scmVersion.projectVersion

	repositories {
		mavenCentral()
	}

	dependencyManagement {
		dependencies {
			dependency 'org.jgrapht:jgrapht-core:1.5.1'
			dependency 'org.mvel:mvel2:2.4.14.Final'
			dependency 'org.apache.groovy:groovy-templates:4.0.5'
			dependency 'org.apache.groovy:groovy-jsr223:4.0.5'
			dependency 'org.slf4j:slf4j-api:1.7.36'
			dependency 'org.slf4j:jcl-over-slf4j:1.7.36'
			dependency 'joda-time:joda-time:2.11.1'
			dependency 'com.google.guava:guava:31.1-jre', {
				exclude 'com.google.code.findbugs:jsr305'
				exclude 'com.google.j2objc:j2objc-annotations'
				exclude 'com.google.errorprone:error_prone_annotations'
				exclude 'org.codehaus.mojo:animal-sniffer-annotations'
				exclude 'org.checkerframework:checker-compat-qual'
				exclude 'org.checkerframework:checker-qual'
				exclude 'com.google.guava:listenablefuture'
			}
			dependency 'org.apache.xmlgraphics:fop:2.7', {
				exclude 'org.apache.xmlgraphics:batik-extension'
				exclude 'commons-logging:commons-logging'
				exclude 'org.apache.pdfbox:fontbox'
				exclude 'xalan:xalan'
				exclude 'xml-apis:xml-apis'
				exclude 'javax.servlet:servlet-api'
				exclude 'org.apache.xmlgraphics:fop-events'
				exclude 'org.apache.xmlgraphics:fop-util'
				exclude 'org.apache.ant:ant'
				exclude 'javax.media:jai-core'
				exclude 'com.sun.media:jai-codec'
			}
			dependency 'org.beanfabrics:beanfabrics-swing:1.4.3'
			dependency 'org.swinglabs:jxlayer:3.0.4'
			dependency 'com.fifesoft:rsyntaxtextarea:3.2.0'
			dependency 'org.ini4j:ini4j:0.5.4'
			dependency 'com.github.vlsi.mxgraph:jgraphx:4.2.2'
			dependency 'org.apache.logging.log4j:log4j-slf4j-impl:2.18.0'
			dependency 'org.apache.logging.log4j:log4j-core:2.18.0'
			dependency 'de.skuzzle:semantic-version:2.1.1'
			dependency 'org.glassfish.jaxb:jaxb-runtime:4.0.0', {
				exclude 'org.glassfish.jaxb:txw2'
			}
			dependency 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'
			dependency 'org.junit.jupiter:junit-jupiter-api:5.9.0'
			dependency 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
			dependency 'org.hamcrest:hamcrest:2.2'
			dependency 'io.smallrye.reactive:mutiny:1.7.0'
		}
	}

	if (prj.name in nonJavaProjectsFilter) {
		return
	}

	apply plugin: 'java-library'
	apply plugin: 'maven-publish'

	publishing {
		publications {
			maven(MavenPublication) {
				from components.java
				versionMapping {
					usage('java-api') {
						fromResolutionResult()
					}
					usage('java-runtime') {
						fromResolutionResult()
					}
				}
			}
		}
	}

	tasks.withType(JavaCompile).configureEach {
		options.release = outputJavaVersion
		options.encoding = 'utf-8'
	}

	tasks.named('test').configure {
		useJUnitPlatform()
	}

	tasks.named('jar').configure {
		manifest {
			attributes(
				"Specification-Title": prj.name,
				"Specification-Version": scmVersion.baseVersion,
				"Implementation-Title": prj.name,
				"Implementation-Version-Short": scmVersion.shortVersion,
				"Permissions": "all-permissions"
			)
		}
	}

	project.tasks.withType(Jar).configureEach { task ->
		task.doFirst {
			manifest {
				attributes(
					"Build-Id": scmVersion.buildId,
					"Build-Time": scmVersion.buildTimestamp,
					"Implementation-Version": scmVersion.distVersion,
				)
			}
		}
	}
}
