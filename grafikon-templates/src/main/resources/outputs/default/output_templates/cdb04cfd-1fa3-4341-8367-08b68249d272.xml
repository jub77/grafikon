<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<library_item type="OUTPUT_TEMPLATE">
    <attributes/>
    <output_template>
        <id>cdb04cfd-1fa3-4341-8367-08b68249d272</id>
        <template>
            <template>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;%
import net.parostroj.timetable.model.TrainsCycleType
import net.parostroj.timetable.utils.TransformUtil
import java.text.Collator
import net.parostroj.timetable.model.*
import net.parostroj.timetable.actions.*

SPACE = "&amp;#160;"
TRAIN_RIGHT = "&amp;#10704;"

def border() {"border=\"solid .3mm black\""}
def padding() {"padding=\".4mm .6mm .1mm 0.6mm\""}


def getIntervals(node, filter) {
    def list = new TimeIntervalList()
    node.tracks.stream().flatMap({track -&gt; track.timeIntervalList.stream()})
        .filter({i -&gt; !i.technological &amp;&amp; filter(i)})
        .forEach({p -&gt; list.addIntervalByNormalizedStartTime(p)})
    return list
}

def getCycleItems(diagram, node) {
    def items = []
    def intervals = getIntervals(node, {i -&gt; true})
    def cTypes = [diagram.engineCycleType, diagram.trainUnitCycleType]
    cTypes = cTypes + diagram.cycleTypes.findAll {!it.defaultType};
    for (interval in intervals) {
        for (cType in cTypes) {
            def allItems = interval.train.getCycleItemsForInterval(cType, interval)
            for (item in allItems) {
                if (item.fromInterval == interval) {
                    items &lt;&lt; item
                }
            }
        }
    }
    return items
}

%&gt;
&lt;root xmlns="http://www.w3.org/1999/XSL/Format"&gt;
  &lt;layout-master-set&gt;
    &lt;simple-page-master master-name="simpleA4" page-height="29.7cm" page-width="21cm" margin-top="1.5cm" margin-bottom="1.5cm" margin-left="1.5cm" margin-right="1.5cm"&gt;
      &lt;region-body/&gt;
    &lt;/simple-page-master&gt;
  &lt;/layout-master-set&gt;
  &lt;page-sequence master-reference="simpleA4" font-family="SansCondensed" font-size="3mm"&gt;
    &lt;flow flow-name="xsl-region-body"&gt;
      &lt;% generate(nodes) %&gt;
      &lt;% if (!nodes) { %&gt;&lt;block&gt;&lt;/block&gt;&lt;% } %&gt;
    &lt;/flow&gt;
  &lt;/page-sequence&gt;
&lt;/root&gt;
&lt;%
def generate(nodes) {
  def generated = false
  for (node in nodes) {
    def loc = util.getLocaleForNode(node, locale)
    def collator = util.getCollator(loc)
    def cItems = getCycleItems(diagram, node)
    if (!cItems) continue %&gt;
    generated = true
    &lt;block break-before="page" font-size="5.5mm" font-weight="bold" text-align="center" space-after="2.5mm" font-family="Sans"&gt;${node.name}&lt;/block&gt;
    &lt;%
    if (cItems) { %&gt;
    &lt;block font-size="3.75mm" font-weight="bold" space-after=".25mm" space-before="2.5mm"&gt;${localization["start"].translate(loc)}&lt;/block&gt;
    &lt;table ${border()} border-collapse="collapse" table-layout="fixed" width="100%"&gt;
      &lt;table-column column-width="12%" ${border()} /&gt;
      &lt;table-column column-width="5.5%" ${border()} /&gt;
      &lt;table-column column-width="13%" ${border()} /&gt;
      &lt;table-column column-width="39.5%" ${border()} /&gt;
      &lt;table-column column-width="13%" ${border()} /&gt;
      &lt;table-column column-width="17%" ${border()} /&gt;
      &lt;table-body&gt;&lt;%
    def current = null
    for (item in cItems) {
        def same = current == item.train
        current = item.train
        def trainName = same ? "" : item.train.name.translate(loc)
        def cycle = item.cycle
        def time = same ? "" : diagram.timeConverter.convertIntToText(item.fromInterval.end)
        def previous = cycle.getPreviousItem(item)
        previous = previous ? "${previous.train.name.translate(loc)} (${diagram.timeConverter.convertIntToText(previous.toInterval.end)})" : null
        def desc = cycle.getDisplayDescription() %&gt;
        &lt;table-row ${border()}&gt;
            &lt;table-cell ${padding()}&gt;&lt;block&gt;${trainName}&lt;/block&gt;&lt;/table-cell&gt;
            &lt;table-cell ${padding()} text-align="right"&gt;&lt;block&gt;${time}&lt;/block&gt;&lt;/table-cell&gt;
            &lt;table-cell ${padding()}&gt;&lt;block&gt;${cycle.name}&lt;/block&gt;&lt;/table-cell&gt;
            &lt;table-cell ${padding()}&gt;&lt;block&gt;${desc ?: ""}&lt;/block&gt;&lt;/table-cell&gt;
            &lt;table-cell ${padding()}&gt;&lt;block&gt;${getCycleDescription(cycle.type, loc)}&lt;/block&gt;&lt;/table-cell&gt;
            &lt;table-cell ${padding()}&gt;&lt;block&gt;${previous ?: ""}&lt;/block&gt;&lt;/table-cell&gt;
        &lt;/table-row&gt;&lt;%
    }
    %&gt;
      &lt;/table-body&gt;
    &lt;/table&gt;
  &lt;% } %&gt;
  &lt;% } %&gt;
  &lt;% if (!generated) { %&gt;&lt;block&gt;&lt;/block&gt;&lt;% } %&gt;
&lt;% } %&gt;

&lt;%
def getCycleDescription(type, locale) {
  return type.name.translate(locale)
}
%&gt;
</template>
            <language>GROOVY</language>
        </template>
        <script>
            <source_code>import net.parostroj.timetable.actions.*
import net.parostroj.timetable.model.*

def nodes = selection == null ? diagram.net.nodes : selection

if (settings['one.file']) {
    nodes = ElementSort.sort(
        nodes,
        new NodeComparator(),
        {node -&gt; node.type.station || node.type == NodeType.STOP_WITH_FREIGHT}
    )
    outputs.create().setName("${key}.pdf").setContext(["nodes" : nodes]);
} else {
    for (station in nodes) {
        def type = station.type
        if (type.stop || type.station) {
            outputs
                .create()
                .setName("${station.name}.pdf")
                .setContext(["nodes":[station]])
                .setDirectory(key)
        }
    }
}
</source_code>
            <language>GROOVY</language>
        </script>
        <attributes>
            <attribute>
                <key>name</key>
                <type>localized.string</type>
                <value type="string">Shunting</value>
                <value type="string.cs">Výpis do stanice s informacemi o manipulacích</value>
            </attribute>
            <attribute>
                <key>key</key>
                <value type="string">shunting</value>
            </attribute>
            <attribute>
                <key>output.type</key>
                <value type="string">diagram</value>
            </attribute>
            <attribute>
                <key>output</key>
                <value type="string">pdf.groovy</value>
            </attribute>
            <attribute>
                <key>description</key>
                <type>localized.string</type>
                <value type="string">PDF: Shunting</value>
                <value type="string.cs">PDF: Výpis do stanice s informacemi o manipulacích</value>
            </attribute>
            <attribute>
                <key>selection.type</key>
                <value type="string">node</value>
            </attribute>
            <attribute>
                <key>start</key>
                <type>localized.string</type>
                <value type="string">Shunting</value>
                <value type="string.cs">Manipulace</value>
                <value type="string.hu">Tolatás</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>one.file</key>
                <type>localized.string</type>
                <value type="string">Output in one file</value>
                <value type="string.cs">Výstup v jednom souboru</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>one.file</key>
                <value type="boolean">true</value>
                <category>settings</category>
            </attribute>
        </attributes>
    </output_template>
</library_item>
