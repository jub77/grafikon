<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<library_item type="OUTPUT_TEMPLATE">
    <attributes/>
    <output_template>
        <id>2e776257-fe62-499d-9181-2709210db24a</id>
        <template>
            <template>&lt;%
    // definition of constants
    WIDTH = 46.5
    HEIGHT = 85
    ROW_COUNT = 3
    COLUMN_COUNT = 4

%&gt;&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;${localization['title'].translate(locale)}&lt;/title&gt;
  &lt;style type="text/css" media="all"&gt;
    table.cycles {border-color: black; border-style: solid; border-width: 0mm;}
    tr.cycles {height: ${HEIGHT}mm;}
    .break {page-break-before: always; font-size: 1mm;}
    td.cycle {border-color: black; border-style: solid; border-width: 0.4mm; vertical-align: top; position: relative;}
    td.cycle table {font-family: arial, sans-serif; font-size: 3mm; width: ${WIDTH}mm; border-color: black; border-style: solid; border-width: 0mm;}
    tr.title {height: 3mm;}
    tr.title td {font-size: 2mm;}
    tr.info {height: 6mm;}
    td.info1 {font-size: 5mm; text-align: center; font-weight: bold;}
    td.info2 {font-size: 4mm; text-align: center; font-weight: bold;}
    tr.listh {height: 3mm; text-align: center;}
    td.trainh {border-color: black; border-style: solid; border-width: 0.2mm 0mm 0mm 0mm; font-size: 2mm; width: 20mm;}
    td.timeh {border-color: black; border-style: solid; border-width: 0.2mm 0mm 0mm 0mm; font-size: 2mm; width: 10mm;}
    td.fromtoh {border-color: black; border-style: solid; border-width: 0.2mm 0mm 0mm 0mm; font-size: 2mm; width: 20mm;}
    tr.row {height: 4mm; text-align: center;}
    tr.emph {font-style: italic;}
    td.trow {text-align: left; padding-left: 0.8mm;}
    td.drow {font-weight: bold; text-align: right; padding-right: 0.1mm;}
    td.ftrow {}
    tr.delim {height: .5mm;}
    tr.delim td {font-size: 0.2mm; border-color: black; border-style: solid; border-width: 0.35mm 0mm 0mm 0mm; width: 21mm;}
    span.no {visibility: hidden;}
    div.footer {font-family: arial, sans-serif; font-size: 3mm; position: absolute; bottom: 0; border-width: 0.2mm 0 0 0; border-style: solid; width: 100%;}
    div.next {padding-left: 0.8mm; float: left;}
    div.citem {padding-right: 0.8mm; float: right;}
    td.sequence {background-image: url("arrow_seq.svg");}
  &lt;/style&gt;
&lt;/head&gt;
&lt;%
    separator = java.text.DecimalFormatSymbols.getInstance().getDecimalSeparator();
    END = "${separator}0"
    FORMATTER = org.joda.time.format.ISODateTimeFormat.hourMinuteSecond()
    PRINT_FORMATTER = new org.joda.time.format.DateTimeFormatterBuilder().appendHourOfDay(1).appendLiteral(':').appendMinuteOfHour(2).appendLiteral(separator).appendFractionOfMinute(1, 1).toFormatter()

    def convertTime(time) {
        def parsed = FORMATTER.parseLocalTime(time)
        def result = PRINT_FORMATTER.print(parsed)
        if (result.endsWith(END)) {
            result = result.replace("${END}", "&lt;span class=\"no\"&gt;${END}&lt;/span&gt;")
        }
        return result
    }

    // counter of sequences
    seqId = 1

    def getSequence(cycle) {
        if (!cycle.next) {
            return [new CycleWrapper(cycle)]
        } else {
            def sequence = []
            def current = cycle
            def cnt = 0
            while (true) {
                sequence &lt;&lt; new CycleWrapper(current, ++cnt, seqId)
                current = current.next
                if (current == cycle) break
            }
            for (w in sequence) {
                w.cnt = cnt
            }
            seqId++
            images &lt;&lt; "arrow_seq.svg"
            return sequence
        }
    }

    def getFirstFreeSequence(sequences, freeColumns) {
        if (sequences.empty) {
            return null
        } else {
            def selected = [null]
            for (sequence in sequences) {
                if (sequence.size() &lt;= freeColumns || sequence.size() &gt; COLUMN_COUNT) {
                    selected = sequence
                    sequences.remove(selected)
                    break
                }
            }
            return selected
        }
    }

    class CycleWrapper {
        def cycle
        def cnt
        def seq
        def id

        CycleWrapper(cycle, seq, id) {
            this.cycle = cycle
            this.seq = seq
            this.id = id
        }

        CycleWrapper(cycle) {
            this.cycle = cycle
        }
    }

    // prepare cycles - duplicate the ones needed in sequences
    def sequences = []
    for (cycle in cycles) {
        sequences &lt;&lt; getSequence(cycle)
    }
    def wrappers = []
    def currentColumn = 0
    while (true) {
        if (sequences.empty) break;
        def freeColumns = COLUMN_COUNT - currentColumn
        def sequence = getFirstFreeSequence(sequences, freeColumns)
        for (w in sequence) {
            ++currentColumn
            wrappers &lt;&lt; w
            if (currentColumn == COLUMN_COUNT) currentColumn = 0
        }
    }
%&gt;
&lt;body&gt;
&lt;%
  Iterator iterator = wrappers.iterator();
  count = 0;
  while(true) {
%&gt;
&lt;table class="cycles" align="center" cellspacing="0" cellpadding="0"&gt;
  &lt;tr class="cycles"&gt;&lt;%
      countInRow = 0;
      c = null;
      while (true) {
        if (iterator.hasNext()) {
          c = iterator.next();
        } else {
          c = null;
        }
        if (c != null) {
          %&gt;
    &lt;td class="cycle${c?.cycle?.next ? ' sequence' : ''}"&gt;
      &lt;% print_cycle(c) %&gt;
    &lt;/td&gt;&lt;%
        } else {
          %&gt;
    &lt;td class="cycle"&gt;
      &lt;table align="center" cellspacing="0"&gt;
        &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
      &lt;/table&gt;
    &lt;/td&gt;&lt;%
        }
        countInRow++;
        if (countInRow == COLUMN_COUNT)
          break;
      }
    %&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;%
    if (!iterator.hasNext())
      break;
    count++;
    if (count % ROW_COUNT == 0) {
      %&gt;&lt;div class="break"&gt;&amp;nbsp;&lt;/div&gt;
&lt;%
    }
  }

def print_cycle(w) {
    def c = w.cycle
    def loc = getLocale(c)
    def company = getCompany(c)
%&gt;&lt;table align="center" cellspacing="0"&gt;
        &lt;tr class="title"&gt;
          &lt;td colspan="3"&gt;${localization["cycle"].translate(loc)}:${company ? " " + company : ""}&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class="info"&gt;
          &lt;td class="info1"&gt;${c.name}&lt;/td&gt;
          &lt;td class="info2" colspan="2"&gt;${c.description ?: ""}&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class="listh"&gt;
          &lt;td class="trainh"&gt;${localization["column.train"].translate(loc)}&lt;/td&gt;
          &lt;td class="timeh"&gt;${localization["column.departure"].translate(loc)}&lt;/td&gt;
          &lt;td class="fromtoh"&gt;${localization["column.from.to"].translate(loc)}&lt;/td&gt;
        &lt;/tr&gt;&lt;% for (row in c.rows) {
                  if (row.wait &gt; 25*60) {
                    %&gt;
        &lt;tr class="delim"&gt;
          &lt;td colspan="3"&gt;&amp;nbsp;&lt;/td&gt;
        &lt;/tr&gt;&lt;%
                  }
              %&gt;
        &lt;tr class="row${row.helper ? " emph" : ""}"&gt;
          &lt;td class="trow"&gt;${row.trainName.translate(loc)}&lt;/td&gt;
          &lt;td class="drow"&gt;${convertTime(row.fromTime)}&lt;/td&gt;
          &lt;td class="ftrow"&gt;${row.fromAbbr} - ${row.toAbbr}&lt;/td&gt;
        &lt;/tr&gt;&lt;% } %&gt;
      &lt;/table&gt;&lt;% if (c.next) { %&gt;
      &lt;div class="footer"&gt;
          &lt;div class="next"&gt;&amp;nbsp;&amp;rarr; ${c.next.name}&lt;/div&gt;
          &lt;div class="citem"&gt;${w.id}[${w.seq}/${w.cnt}]&lt;/div&gt;
      &lt;/div&gt;&lt;% }
}

def getCompany(cycle) {
    def company = cycle?.company?.abbr
}

def getLocale(cycle) {
    def l = cycle?.company?.locale
    return l ?: locale
}
%&gt;
&lt;/body&gt;
&lt;/html&gt;
</template>
            <language>GROOVY</language>
        </template>
        <attachment name="arrow_seq.svg" type="BINARY">
            <binaryData>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+DQ0KPHN2ZyBpZD0iY2FyZC1hcnJvdyIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiBoZWlnaHQ9IjMwMS4xOCIgd2lkdGg9IjE2Ni41NCIgdmVyc2lvbj0iMS4xIj4NICA8Zw0gICAgIGlkPSJsYXllcjEiDSAgICAgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMCwtNzQwLjczMjkyKSINICAgICBzdHlsZT0ic3Ryb2tlOiNiYmJiYmI7c3Ryb2tlLW9wYWNpdHk6MSI+DSAgICA8cGF0aA0gICAgICAgc3Ryb2tlLWxpbmVqb2luPSJtaXRlciINICAgICAgIGQ9Ik0gMTQyLjA2LDkxOS4yNSBDIDEzOC4xOSw4NjcuNjggOTUuMDM1LDgyOC4xMyAyNC40OSw4MjYuMTkgbCAtMC4yMzU2LC01Mi41NCBjIDM4LjA4MiwtMC4wMTU2IDExNi42NywxOS44MDUgMTE3LjgsOTMuMjk5IHYgNDguNzcgYyAwLjMxMzkzLDU3LjM1OSAtNDIuNTI0LDc5LjM2NSAtNzguOTI3LDk0LjAwNiB2IDI1LjY4MSBsIC0zOS4xMSwtNDcuNTkyIDM5LjExLC02Mi42NzQgdiAzMC4xNiBjIDM0LjgzMiwtMTEuNzY4IDYwLjEsLTI3LjI1IDczLjc0NCwtNjAuNTUiDSAgICAgICBzdHJva2UtbGluZWNhcD0iYnV0dCINICAgICAgIHN0cm9rZS1taXRlcmxpbWl0PSI0Ig0gICAgICAgc3Ryb2tlLWRhc2hhcnJheT0ibm9uZSINICAgICAgIHN0cm9rZS13aWR0aD0iMy4zMTM0NDkzOCINICAgICAgIGZpbGw9Im5vbmUiDSAgICAgICBpZD0icGF0aDQiDSAgICAgICBzdHlsZT0ic3Ryb2tlOiNiYmJiYmI7c3Ryb2tlLW9wYWNpdHk6MSIgLz4NICA8L2c+DTwvc3ZnPg0=</binaryData>
        </attachment>
        <attributes>
            <attribute>
                <key>name</key>
                <type>localized.string</type>
                <value type="string">Cards for circulations of engines</value>
                <value type="string.cs">Lístky pro oběhy hnacích vozidel</value>
            </attribute>
            <attribute>
                <key>key</key>
                <value type="string">engines_html</value>
            </attribute>
            <attribute>
                <key>output.type</key>
                <value type="string">engine_cycles</value>
            </attribute>
            <attribute>
                <key>output</key>
                <value type="string">groovy</value>
            </attribute>
            <attribute>
                <key>description</key>
                <type>localized.string</type>
                <value type="string">Cards for circulations of engines</value>
                <value type="string.cs">Lístky pro oběhy hnacích vozidel</value>
            </attribute>
            <attribute>
                <key>title</key>
                <type>localized.string</type>
                <value type="string">Circulations</value>
                <value type="string.bg">Циркулации</value>
                <value type="string.cs">Oběhy</value>
                <value type="string.de">Umlaufe</value>
                <value type="string.hu">Fordulók</value>
                <value type="string.pl">Obiegi lokomotyw</value>
                <value type="string.sk">Obehy</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>cycle</key>
                <type>localized.string</type>
                <value type="string">Circulation of engine</value>
                <value type="string.bg">Циркулация на локомотив</value>
                <value type="string.cs">Oběh hnacího vozidla</value>
                <value type="string.de">Umlauf für Triebfahrzeug</value>
                <value type="string.hu">Mozdony forduló</value>
                <value type="string.pl">Obieg lokomotywy</value>
                <value type="string.sk">Obeh hnacieho vozidla</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>column.train</key>
                <type>localized.string</type>
                <value type="string">Train</value>
                <value type="string.bg">Влак</value>
                <value type="string.cs">Vlak</value>
                <value type="string.de">Zug</value>
                <value type="string.hu">Vonat</value>
                <value type="string.pl">Pociąg</value>
                <value type="string.sk">Vlak</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>column.departure</key>
                <type>localized.string</type>
                <value type="string">Departure</value>
                <value type="string.bg">Заминава</value>
                <value type="string.cs">Odjezd</value>
                <value type="string.de">Abfahrt</value>
                <value type="string.hu">Indulás</value>
                <value type="string.pl">Odjazd</value>
                <value type="string.sk">Odjazd</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>column.from.to</key>
                <type>localized.string</type>
                <value type="string">From-To</value>
                <value type="string.bg">От - До</value>
                <value type="string.cs">Z-Do</value>
                <value type="string.de">Aus-Nach</value>
                <value type="string.hu">Honnan-Hova</value>
                <value type="string.pl">Z-Do</value>
                <value type="string.sk">Z-Do</value>
                <category>localization</category>
            </attribute>
        </attributes>
    </output_template>
</library_item>
