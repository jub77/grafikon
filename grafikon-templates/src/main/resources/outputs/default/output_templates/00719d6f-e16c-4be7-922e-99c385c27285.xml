<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<library_item type="OUTPUT_TEMPLATE">
    <attributes/>
    <output_template>
        <id>00719d6f-e16c-4be7-922e-99c385c27285</id>
        <template>
            <template>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;%
    // definition of constants
    ROW_COUNT = 2
    COLUMN_COUNT = 2
    HEIGHT = 95

    BORDER = "solid 0.4mm black"
    RARR = "&amp;#8594;"
    MARGIN = ".4mm .5mm .1mm .5mm"

    FORMATTER = org.joda.time.format.ISODateTimeFormat.hourMinuteSecond()
    PRINT_FORMATTER = new org.joda.time.format.DateTimeFormatterBuilder().appendHourOfDay(1).appendLiteral(':').appendMinuteOfHour(2).toFormatter()

    def convertTime(time) {
        def parsed = FORMATTER.parseLocalTime(time)
        def result = PRINT_FORMATTER.print(parsed)
        return result
    }

    // counter of sequences
    seqId = 1

    def getSequence(cycle) {
        if (!cycle.next) {
            return [new CycleWrapper(cycle)]
        } else {
            def sequence = []
            def current = cycle
            def cnt = 0
            while (true) {
                sequence &lt;&lt; new CycleWrapper(current, ++cnt, seqId)
                current = current.next
                if (current == cycle) break
            }
            for (w in sequence) {
                w.cnt = cnt
            }
            seqId++
            return sequence
        }
    }

    def getFirstFreeSequence(sequences, freeColumns) {
        if (sequences.empty) {
            return null
        } else {
            def selected = [null]
            for (sequence in sequences) {
                if (sequence.size() &lt;= freeColumns || sequence.size() &gt; COLUMN_COUNT) {
                    selected = sequence
                    sequences.remove(selected)
                    break
                }
            }
            return selected
        }
    }

    class CycleWrapper {
        def cycle
        def cnt
        def seq
        def id

        CycleWrapper(cycle, seq, id) {
            this.cycle = cycle
            this.seq = seq
            this.id = id
        }

        CycleWrapper(cycle) {
            this.cycle = cycle
        }
    }

    // prepare cycles - duplicate the ones needed in sequences
    def sequences = []
    for (cycle in cycles) {
        sequences &lt;&lt; getSequence(cycle)
    }
    def wrappers = []
    def currentColumn = 0
    while (true) {
        if (sequences.empty) break;
        def freeColumns = COLUMN_COUNT - currentColumn
        def sequence = getFirstFreeSequence(sequences, freeColumns)
        for (w in sequence) {
            ++currentColumn
            wrappers &lt;&lt; w
            if (currentColumn == COLUMN_COUNT) currentColumn = 0
        }
    }
    def notAligned = wrappers.size() % COLUMN_COUNT
    if (notAligned != 0) {
        (COLUMN_COUNT - notAligned).times {wrappers &lt;&lt; null}
    }
%&gt;
&lt;root xmlns="http://www.w3.org/1999/XSL/Format"&gt;
&lt;layout-master-set&gt;
  &lt;simple-page-master master-name="simpleA4-portrait" page-height="21cm" page-width="29.7cm" margin=".5cm .5cm .5cm .5cm"
      line-stacking-strategy="font-height" line-height-shift-adjustment="disregard-shifts"&gt;
    &lt;region-body /&gt;
  &lt;/simple-page-master&gt;
&lt;/layout-master-set&gt;
&lt;page-sequence master-reference="simpleA4-portrait" font-family="SansCondensed"&gt;
  &lt;flow flow-name="xsl-region-body"&gt;
  &lt;% printWrappers(wrappers) %&gt;
  &lt;% if (!wrappers) { %&gt;&lt;block&gt;&lt;/block&gt;&lt;% } %&gt;
  &lt;/flow&gt;
&lt;/page-sequence&gt;
&lt;/root&gt;
&lt;%
def printWrappers(wrappers) {
  boolean pageBreak = true;
  def rowCnt = 0
  def columnCnt = 0
  for (w in wrappers) {
      switch (columnCnt) {
          case 0:
              rowPrologue()
              break;
          default:
              columnDivide()
              break;
      }
      if (w == null) {
          generateEmpty();
      } else {
          generateCirculation(w)
      }
      columnCnt++
      switch (columnCnt) {
          case COLUMN_COUNT:
              rowEpilogue()
              break;
      }
      if (columnCnt == COLUMN_COUNT) {
          columnCnt = 0
          rowCnt++
      }
  }
}

  def generateEmpty() {
    %&gt;&lt;table-cell&gt;&lt;block&gt;&lt;/block&gt;&lt;/table-cell&gt;&lt;%
  }

  def rowPrologue() {
      %&gt;&lt;table border-collapse="separate" border-separation="4mm" table-layout="fixed" width="100%"&gt;&lt;table-body&gt;&lt;table-row height="${HEIGHT}mm"&gt;
  &lt;%
  }

  def rowEpilogue() {
      %&gt;&lt;/table-row&gt;&lt;/table-body&gt;&lt;/table&gt;
  &lt;%
  }

  def columnDivide() {
      %&gt;
  &lt;%
  }

  def generateCirculation(w) {
      def c = w.cycle
      def lLoc = getLocale(c) %&gt;
&lt;table-cell border="${BORDER}"&gt;&lt;block&gt;
&lt;table font-size="3mm" border-collapse="collapse" border-separation="0" table-layout="fixed" width="100%" ${backgroundSequence(c)}&gt;
&lt;table-body&gt;&lt;table-row height="${HEIGHT-4.5}mm"&gt;&lt;table-cell number-columns-spanned="2"&gt;&lt;block&gt;
&lt;table table-layout="fixed" width="100%"&gt;
  &lt;table-body&gt;
  &lt;table-row border-bottom="${BORDER}" height="11mm"&gt;
    &lt;table-cell width="25mm" border-right="${BORDER}" display-align="center" text-align="center"&gt;&lt;block font-size="5.5mm" font-weight="bold" font-family="Sans" margin="2mm 1mm .3mm 1mm"&gt;${getCompany(c, lLoc)}&lt;/block&gt;&lt;/table-cell&gt;
    &lt;table-cell width="25mm" border-right="${BORDER}"&gt;
      &lt;block margin="${MARGIN}" font-size="2.5mm"&gt;${localization["cycle"].translate(lLoc)}:&lt;/block&gt;
      &lt;block margin="${MARGIN}" font-size="4.5mm" font-weight="bold"&gt;${c.name}&lt;/block&gt;
    &lt;/table-cell&gt;
    &lt;table-cell&gt;
      &lt;block margin="${MARGIN}" font-size="2.5mm"&gt;${localization["composition"].translate(lLoc)}:&lt;/block&gt;
      &lt;block margin="${MARGIN}" font-size="4mm" font-weight="bold"&gt;${c.description ?: ""}&lt;/block&gt;
     &lt;/table-cell&gt;
  &lt;/table-row&gt;
  &lt;table-row&gt;
    &lt;table-cell number-columns-spanned="3" padding="2mm 2mm 0mm 2mm"&gt;&lt;block&gt;
      &lt;table table-layout="fixed" width="100%"&gt;&lt;table-body&gt;
        &lt;table-row text-align="center" font-weight="bold" font-size="2.5mm"&gt;
          &lt;table-cell border="${BORDER}" width="20mm"&gt;&lt;block margin="${MARGIN}"&gt;${localization["column.train"].translate(lLoc)}&lt;/block&gt;&lt;/table-cell&gt;
          &lt;table-cell border="${BORDER}" width="12mm"&gt;&lt;block margin="${MARGIN}"&gt;${localization["column.departure"].translate(lLoc)}&lt;/block&gt;&lt;/table-cell&gt;
          &lt;table-cell border="${BORDER}" width="20mm"&gt;&lt;block margin="${MARGIN}"&gt;${localization["column.from.to"].translate(lLoc)}&lt;/block&gt;&lt;/table-cell&gt;
          &lt;table-cell border="${BORDER}"&gt;&lt;block margin="${MARGIN}"&gt;${localization["column.note"].translate(lLoc)}&lt;/block&gt;&lt;/table-cell&gt;
        &lt;/table-row&gt;&lt;% for (row in c.rows) { %&gt;
        &lt;table-row&gt;
          &lt;table-cell border="${BORDER}"&gt;&lt;block margin="${MARGIN}"&gt;${row.trainName.translate(lLoc)}&lt;/block&gt;&lt;/table-cell&gt;
          &lt;table-cell border="${BORDER}"&gt;&lt;block margin="${MARGIN}" text-align="right" font-weight="bold"&gt;${convertTime(row.fromTime)}&lt;/block&gt;&lt;/table-cell&gt;
          &lt;table-cell border="${BORDER}"&gt;&lt;block margin="${MARGIN}"&gt;${row.fromAbbr} - ${row.toAbbr}&lt;/block&gt;&lt;/table-cell&gt;
          &lt;table-cell border="${BORDER}"&gt;&lt;block margin="${MARGIN}"&gt;${createComment(row, lLoc)}&lt;/block&gt;&lt;/table-cell&gt;
        &lt;/table-row&gt;&lt;% } %&gt;
      &lt;/table-body&gt;&lt;/table&gt;&lt;/block&gt;
    &lt;/table-cell&gt;
  &lt;/table-row&gt;
&lt;/table-body&gt;&lt;/table&gt;
&lt;/block&gt;&lt;/table-cell&gt;&lt;/table-row&gt;&lt;%
  if (c.next) { %&gt;
  &lt;table-row border-top="${BORDER}"&gt;
    &lt;table-cell&gt;&lt;block margin="${MARGIN}"&gt;${RARR} ${c.next.name}&lt;/block&gt;&lt;/table-cell&gt;
    &lt;table-cell text-align="right"&gt;&lt;block margin="${MARGIN}"&gt;${w.id}[${w.seq}/${w.cnt}]&lt;/block&gt;&lt;/table-cell&gt;
  &lt;/table-row&gt;&lt;%
  } %&gt;
&lt;/table-body&gt;&lt;/table&gt;
&lt;/block&gt;&lt;/table-cell&gt;
&lt;%
  }

  def createComment(row, loc) {
    def result = row.cycle.inject(row.comment ? row.comment.translate(loc) : null) {
      str, item -&gt;
        if (str == null)
          str = ""
        if (str != "")
          str += ", "
        def value = "${item.type.translate(loc)}: ${item.name}"
        if (item.fromAbbr != null)
          value = "${value} (${item.fromAbbr} - ${item.toAbbr})"
        str + value
    }
    return result == null ? "" : result
  }

  def getCompany(cycle, loc) {
      def company = cycle?.company?.abbr
      return company ?: localization["company"].translate(loc)
  }

  def getLocale(cycle) {
      def l = cycle?.company?.locale
      return l ?: locale
  }

  def backgroundSequence(c) {
      return c.next ? 'background-image="arrow_seq_pdf.svg" background-repeat="no-repeat" background-position-horizontal="center" background-position-vertical="center"' : "";
  }
%&gt;
</template>
            <language>GROOVY</language>
        </template>
        <script>
            <source_code>def circulations = selection == null
    ? diagram.trainUnitCycleType.cycles
    : selection.inject([] as Set, {set, item -&gt; item.aggregateSequence(set, {circs, circ -&gt; circs &lt;&lt; circ})})
outputs.create().setName("${key}.pdf").setParams(["cycles":circulations])
</source_code>
            <language>GROOVY</language>
        </script>
        <attachment name="arrow_seq_pdf.svg" type="BINARY">
            <binaryData>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+DQoNCjxzdmcNCiAgIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyINCiAgIHZlcnNpb249IjEuMSINCiAgIHdpZHRoPSIxMDYuMjk5MjEiDQogICBoZWlnaHQ9IjIxMi41OTg0MiINCiAgIGlkPSJjYXJkLWFycm93Ij4NCiAgPGRlZnMNCiAgICAgaWQ9ImRlZnMzMDAwIiAvPg0KICA8Zw0KICAgICB0cmFuc2Zvcm09Im1hdHJpeCgwLjczNzA5ODcyLDAsMCwwLjczNzA5ODcyLC04LjE1OTQwMDQsLTU2MC40OTc5NCkiDQogICAgIGlkPSJsYXllcjEiDQogICAgIHN0eWxlPSJzdHJva2U6I2JiYmJiYjtzdHJva2Utb3BhY2l0eToxIj4NCiAgICA8cGF0aA0KICAgICAgIGQ9Ik0gMTQyLjA2LDkxOS4yNSBDIDEzOC4xOSw4NjcuNjggOTUuMDM1LDgyOC4xMyAyNC40OSw4MjYuMTkgbCAtMC4yMzU2LC01Mi41NCBjIDM4LjA4MiwtMC4wMTU2IDExNi42NywxOS44MDUgMTE3LjgsOTMuMjk5IHYgNDguNzcgYyAwLjMxMzkzLDU3LjM1OSAtNDIuNTI0LDc5LjM2NSAtNzguOTI3LDk0LjAwNiB2IDI1LjY4MSBsIC0zOS4xMSwtNDcuNTkyIDM5LjExLC02Mi42NzQgdiAzMC4xNiBjIDM0LjgzMiwtMTEuNzY4IDYwLjEsLTI3LjI1IDczLjc0NCwtNjAuNTUiDQogICAgICAgaWQ9InBhdGg0Ig0KICAgICAgIHN0eWxlPSJmaWxsOm5vbmU7c3Ryb2tlOiNiYmJiYmI7c3Ryb2tlLXdpZHRoOjMuMzEzNDQ5Mzg7c3Ryb2tlLWxpbmVjYXA6YnV0dDtzdHJva2UtbGluZWpvaW46bWl0ZXI7c3Ryb2tlLW1pdGVybGltaXQ6NDtzdHJva2Utb3BhY2l0eToxO3N0cm9rZS1kYXNoYXJyYXk6bm9uZSIgLz4NCiAgPC9nPg0KPC9zdmc+DQo=</binaryData>
        </attachment>
        <attributes>
            <attribute>
                <key>name</key>
                <type>localized.string</type>
                <value type="string">Cards for train units</value>
                <value type="string.cs">Karty pro soupravy</value>
            </attribute>
            <attribute>
                <key>key</key>
                <value type="string">train_units</value>
            </attribute>
            <attribute>
                <key>output.type</key>
                <value type="string">train_unit_cycles</value>
            </attribute>
            <attribute>
                <key>output</key>
                <value type="string">pdf.groovy</value>
            </attribute>
            <attribute>
                <key>description</key>
                <type>localized.string</type>
                <value type="string">PDF: Cards for train units</value>
                <value type="string.cs">PDF: Karty pro soupravy</value>
            </attribute>
            <attribute>
                <key>selection.type</key>
                <value type="string">train.unit.circulation</value>
            </attribute>
            <attribute>
                <key>title</key>
                <type>localized.string</type>
                <value type="string">Cards for train units</value>
                <value type="string.bg">Карти за мотриси</value>
                <value type="string.cs">Karty souprav</value>
                <value type="string.de">Karten Zug Garnitur</value>
                <value type="string.hu">Szerelvény fordulók</value>
                <value type="string.pl">Zestawienie składów</value>
                <value type="string.sk">Karty súprav</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>company</key>
                <type>localized.string</type>
                <value type="string">ČSD</value>
                <value type="string.bg">БДЖ</value>
                <value type="string.cs">ČSD</value>
                <value type="string.de">ÖBB</value>
                <value type="string.hu">MÁV</value>
                <value type="string.pl">PKP</value>
                <value type="string.sk">ČSD</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>cycle</key>
                <type>localized.string</type>
                <value type="string">Circulation</value>
                <value type="string.bg">Циркулация</value>
                <value type="string.cs">Oběh</value>
                <value type="string.de">Umlauf</value>
                <value type="string.hu">Szerelvény forduló</value>
                <value type="string.pl">Obieg</value>
                <value type="string.sk">Obeh</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>composition</key>
                <type>localized.string</type>
                <value type="string">Train unit structure</value>
                <value type="string.bg">Състав на влака</value>
                <value type="string.cs">Složení soupravy</value>
                <value type="string.de">Zug Garnitur</value>
                <value type="string.hu">Szerelvény összeállítás</value>
                <value type="string.pl">Zestawienie składu</value>
                <value type="string.sk">Zloženie súpravy</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>column.train</key>
                <type>localized.string</type>
                <value type="string">Train</value>
                <value type="string.bg">Влак</value>
                <value type="string.cs">Vlak</value>
                <value type="string.de">Zug</value>
                <value type="string.hu">Vonat</value>
                <value type="string.pl">Pociąg</value>
                <value type="string.sk">Vlak</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>column.departure</key>
                <type>localized.string</type>
                <value type="string">Dep</value>
                <value type="string.bg">Заминава</value>
                <value type="string.cs">Odjezd</value>
                <value type="string.de">Abfahrt</value>
                <value type="string.hu">Indulás</value>
                <value type="string.pl">Odjazd</value>
                <value type="string.sk">Odjazd</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>column.from.to</key>
                <type>localized.string</type>
                <value type="string">From - To</value>
                <value type="string.bg">От - До</value>
                <value type="string.cs">Z - Do</value>
                <value type="string.de">Aus - Nach</value>
                <value type="string.hu">Honnan - Hova</value>
                <value type="string.pl">Z - Do</value>
                <value type="string.sk">Z - Do</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>column.note</key>
                <type>localized.string</type>
                <value type="string">Note</value>
                <value type="string.bg">Бележка</value>
                <value type="string.cs">Poznámka</value>
                <value type="string.de">Bemerkung</value>
                <value type="string.hu">Megjegyzés</value>
                <value type="string.pl">Uwagi</value>
                <value type="string.sk">Poznámka</value>
                <category>localization</category>
            </attribute>
        </attributes>
    </output_template>
</library_item>
