<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<library_item type="OUTPUT_TEMPLATE">
    <attributes/>
    <output_template>
        <id>84bfe6cb-1610-41f4-93af-0c11633c866e</id>
        <template>
            <template>&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;
  &lt;title&gt;${localization['train.timetable'].translate(locale)}&lt;/title&gt;
  &lt;style type="text/css" media="all"&gt;
    table.index {font-family: arial, sans-serif; font-size: 3mm; border-color: black; border-style: solid; border-width: 0.7mm ;}
    table.index tr {height: 4mm;}
    table.index tr td {width: 21mm; text-align: center;}

    td span.s1 {font-size: 1.85mm; font-weight: normal; position: relative; top: -1.1mm;}
    td span.s2 {font-size: 2mm; font-weight: normal; position: relative; top: -1.4mm;}

    td.column-1 {border-color: black; border-style: solid; border-width: 0mm 0.2mm 0mm 0mm;}
    td.column-2 {border-color: black; border-style: solid; border-width: 0mm 0.7mm 0mm 0mm;}
    td.column-1-delim {border-color: black; border-style: solid; border-width: 0.2mm 0.2mm 0.4mm 0mm;}
    td.column-2-delim {border-color: black; border-style: solid; border-width: 0.2mm 0.7mm 0.4mm 0mm;}
    td.column-3-delim {border-color: black; border-style: solid; border-width: 0.2mm 0mm 0.4mm 0mm;}

    table.two-pages {width: 274mm; font-size: 3mm; font-family: arial, sans-serif; border-width: 0mm;}
    table.page-break {page-break-after: always;}
    table.tt {margin: 0mm; padding: 0mm; font-family: arial, sans-serif; font-size: 3mm; width: 125mm; border-color: black; border-style: solid; border-width: 0mm; }
    table.tt tr td {border-color: black; border-style: solid; border-width: 0mm; padding: 0.3mm;}
    table.tt tr.hline {height: 4mm; text-align: center;}
    table.tt tr.line {height: 5mm;}
    table.tt tr.fline {height: 4.5mm; font-size: 3.5mm;}
    table.tt tr.fline td.totalt {border-width: 0.4mm 0.2mm 0.4mm 0mm; text-align: right;}
    table.tt tr.fline td.totali {border-width: 0.4mm 0.2mm 0.4mm 0mm; text-align: center;}
    table.tt tr.fline td.totalv {border-width: 0.4mm 0mm 0.4mm 0mm;}
    table.tt tr.line td {font-size: 3.5mm;}
    div.symbol {width: 7mm; float: left;}
    table.tt tr.cline {height: 4mm;}
    table.tt tr.cline td {font-size: 3mm; border-width:0mm; margin: 0mm; padding: 0mm}

    table.wl {}
    table.wl tr {height: 4mm;}
    table.wl tr td {border-width: 0; margin: 0; padding: 0; font-size: 3mm;}

    table tr td {vertical-align: text-bottom; }

    table.tt tr td.tc-d3-1 { width: 39mm; border-right-width: 0.2mm; }
    table.tt tr td.tc-d3-2 { width: 7mm; border-right-width: 0.2mm; }
    table.tt tr td.tc-d3-2a { width: 6mm; border-right-width: 0.2mm; }
    table.tt tr td.tc-d3-3 { width: 7mm; border-right-width: 0.2mm; }
    table.tt tr td.tc-d3-4 { width: 13mm; border-right-width: 0.2mm; }
    table.tt tr td.tc-d3-5 { width: 7mm; border-right-width: 0.2mm; }
    table.tt tr td.tc-d3-6 { width: 13mm; border-right-width: 0.2mm; }
    table.tt tr td.tc-d3-7 { width: 7mm; border-right-width: 0.2mm; }
    table.tt tr td.tc-d3-8 { width: 7mm; border-right-width: 0.2mm; }
    table.tt tr td.tc-d3-9 { width: 18mm; }

    table.tt tr td.tc-1 { width: 39mm; border-right-width: 0.2mm; }
    table.tt tr td.tc-2 { width: 8mm; border-right-width: 0.2mm; }
    table.tt tr td.tc-3 { width: 8mm; border-right-width: 0.2mm; }
    table.tt tr td.tc-4 { width: 16mm; border-right-width: 0.2mm; }
    table.tt tr td.tc-5 { width: 8mm; border-right-width: 0.2mm; }
    table.tt tr td.tc-6 { width: 16mm; border-right-width: 0.2mm; }
    table.tt tr td.tc-7 { width: 8mm; border-right-width: 0.2mm; }
    table.tt tr td.tc-8 { width: 21mm; }

    table.tt tr td.tc-m-1 {font-size: 3.5mm; }
    table.tt tr td.tc-m-2 { text-align: center; font-size: 3.5mm; }
    table.tt tr td.tc-m-2a { text-align: center; font-size: 3.5mm; }
    table.tt tr td.tc-m-3 { text-align: right; font-size: 3.5mm; font-weight: bold;}
    table.tt tr td.tc-m-4 { text-align: right; font-size: 4mm; font-weight: bold;}
    table.tt tr td.tc-m-5 { text-align: right; font-size: 3.5mm; }
    table.tt tr td.tc-m-6 { text-align: right; font-size: 4mm; font-weight: bold;}
    table.tt tr td.tc-m-7 { text-align: center; font-size: 3.5mm; font-weight: bold;}
    table.tt tr td.tc-m-8 { font-size: 3mm; padding-left: 1mm;}
    table.tt tr td.tc-m-9 { font-size: 3mm; padding-left: 1mm;}

    table.tt tr td.tc-delim-1 {border-top-width: 0.7mm; border-bottom-width: 0.4mm;}

    td.header-l-l {text-align: left; padding-left: 0mm; width: 25%;}
    td.header-l-r {text-align: right; padding-right: 12mm; width: 25%;}
    td.header-r-l {text-align: left; padding-left: 12mm; width: 25%;}
    td.header-r-r {text-align: right; padding-right: 0mm; width: 25%;}

    td.page-left {width: 50%; vertical-align: top; padding-left:0mm; padding-right: 12mm;}
    td.page-right {width: 50%; vertical-align: top; padding-right:0mm; padding-left: 12mm;}

    div.index-title {height: 6mm; font-size: 5mm; font-weight: bold; text-align: center;}
    div.spacer4 {height: 4mm;}
    div.spacer6 {height: 6mm; font-size: 5mm;}

    tr.train-name {height: 6mm; text-align: center;}
    td.train-name {font-size: 5mm; font-weight: bold;}
    span.train-route {font-size: 3mm; font-weight: normal;}
    span.route-emph {font-weight: bold;}

    .emph {font-weight: bold;}
    img.control {height: 2.5mm; vertical-align: baseline;}
    img.signal {height: 3.5mm;}
    img.trapezoid {height: 3.5mm; vertical-align: middle;}

    div.text-page {font-family: "times new roman", serif; font-size: 3.8mm;}
    div.text-page span.bold {font-weight: bold;}
    div.text-page span.italic {font-style: italic;}
    div.text-page span.underline {text-decoration: underline;}
    div.text-page span.strike {text-decoration: line-through;}
    div.text-page div.center {text-align: center;}
    div.text-page img {max-width: 125mm; max-height: 180mm;}

    table.titlepage {width: 125mm;}
    td.company {height: 20mm; font-size: 4mm; text-align: center; font-weight: bold;}
    td.space1 {height: 15mm; font-size: 4mm; text-align: center;}
    td.gtitle {height: 15mm; font-size: 8mm; text-align: center; font-weight: bold;}
    td.numbers {height: 15mm; font-size: 12mm; text-align: center; font-weight: bold;}
    td.line {height: 5mm; font-size: 4mm; text-align: center;}
    td.stations {height: 15mm; font-size: 4mm; text-align: center; font-weight: bold;}
    td.valid {height: 20mm; font-size: 4mm; text-align: center; font-weight: bold;}
    td.cycle {height: 8mm; font-size: 5mm; text-align: center; vertical-align: top; font-weight: bold;}
    td.cycledesc {height: 8mm; font-size: 4mm; text-align: center;}
    td.space2 {height: 50mm; font-size: 5mm; text-align: center; vertical-align: top;}
    td.publish {height: 5mm; font-size: 3mm; text-align: center;}

    table.list2 {font-size: 4mm; width: 120mm; padding-left: 5mm;}
    table.list2 tr td {vertical-align: text-bottom;}
    tr.listh {height: 5mm; font-size: 3mm;}
    tr.listh td {border-color: black; border-style: solid; border-width: 0.2mm 0 0.2mm 0;}
    td.ctrainh {width: 25mm; text-align: left;}
    td.cdepartureh {width: 15mm; text-align: left;}
    td.cfromtoh {width: 30mm; text-align: left;}
    td.cnoteh {width: 45mm; padding-left: 5mm;}
    td.ctrain {vertical-align: bottom;}
    td.cdeparture {vertical-align: bottom; text-align: right; font-weight: bold; padding-right: 3mm;}
    td.cfromto {vertical-align: bottom; text-align: left;}
    td.cnote {font-size: 3mm; padding-left: 2mm; vertical-align: bottom;}
    td.move {vertical-align: bottom;}
    tr.listabbr {font-size: 3.25mm;}
    span.no {visibility:hidden;}
  &lt;/style&gt;
&lt;/head&gt;
&lt;%
  INDEX_FOOTER = 10
  INDEX_HEADER = 24
  INDEX_LINE = 4

  TIMETABLE_FOOTER = 14
  TIMETABLE_HEADER = 13
  TIMETABLE_HEADER_ROUTE = 4
  TIMETABLE_HEADER_WEIGHT = 4
  TIMETABLE_LINE = 5
  TIMETABLE_COMMENT = 4

  PAGE_LENGTH = 185

  separator = java.text.DecimalFormatSymbols.getInstance().getDecimalSeparator();
  END = "${separator}0"
  FORMATTER = org.joda.time.format.ISODateTimeFormat.hourMinuteSecond()
  PRINT_FORMATTER = new org.joda.time.format.DateTimeFormatterBuilder().appendHourOfDay(1).appendLiteral(':').appendMinuteOfHour(2).appendLiteral(separator).appendFractionOfMinute(1, 1).toFormatter()
  engineLeft = settings['engine.left']

  def convertTime(time) {
    def parsed = FORMATTER.parseLocalTime(time)
    def result = PRINT_FORMATTER.print(parsed)
    if (result.endsWith(END)) {
      result = result.replace("${END}", "&lt;span class=\"no\"&gt;${END}&lt;/span&gt;")
    }
    return result
  }
%&gt;
&lt;body&gt;
&lt;%
  // adapt locale (if cycle contains definition)
  def cycleLocale = trains?.cycle?.company?.locale
  locale = cycleLocale ?: locale

  trainPages = createTrainPages(trains.trainTimetables)
  pages = addIndexPages(trainPages)
  addTextPages(trains.texts, pages)
  if (settings['title.page']) {
    addTitlePages(pages)
  }
  printPages(pages, settings['two.sides'] ? "two_sides" : "one_side")
%&gt;
&lt;/body&gt;
&lt;/html&gt;&lt;%
  class Page {
    def number = 0
    def index = false
    def empty = false
    def text = false
    def title = false
    def cycle = false
    def trains = []
    def textStr
    def numbered = true
    def numberShown = true

    static def emptyPage() {
      def aPage = new Page()
      aPage.empty = true
      return aPage
    }
  }

  // compute height of a timetable
  def computeTimetableHeight(train) {
    def length = 0
    length += TIMETABLE_HEADER + TIMETABLE_FOOTER
    length += TIMETABLE_LINE * train.rows.size()
    if (train.weightData != null) {
      length += TIMETABLE_HEADER_WEIGHT * train.weightData.size()
    }
    if (train.routeInfo != null &amp;&amp; train.routeInfo.size() &gt; 0)
      length += TIMETABLE_HEADER_ROUTE
    if (train.lengthData != null)
      length += TIMETABLE_HEADER_ROUTE
    def occupied = false
    def lineEnd = false
    def shunt = false
    def comments = 0
    for (row in train.rows) {
      occupied = occupied || row.occupied
      lineEnd = lineEnd || row.lineEnd
      shunt = shunt || row.shunt
      if (row.comment != null)
        comments++
    }
    if (occupied) length += TIMETABLE_COMMENT
    if (lineEnd) length += TIMETABLE_COMMENT
    if (shunt) length += TIMETABLE_COMMENT
    length += TIMETABLE_COMMENT * comments
    return length
  }

  // add index pages
  def addIndexPages(trainPages) {
    def maxCount = ((PAGE_LENGTH - INDEX_HEADER - INDEX_FOOTER).intdiv(INDEX_LINE)) * 3
    def pages = []
    def indexPage
    def i = 1
    for (page in trainPages) {
      for (train in page.trains) {
        if (indexPage == null || i &gt; maxCount) {
          indexPage = new Page()
          indexPage.index = true
          pages &lt;&lt; indexPage
          i = 1
        }
        indexPage.trains &lt;&lt; [train, page]
        i++
      }
    }
    pages.addAll(trainPages)
    return pages
  }

  // create train pages
  def createTrainPages(trains) {
    // just add three trains per page
    def page = null
    def pages = []
    def pLength = 0
    for (train in trains) {
      def tLength = computeTimetableHeight(train)

      if ((pLength + tLength + 10) &gt; PAGE_LENGTH || page == null) {
        page = new Page()
        pages &lt;&lt; page
        pLength = tLength
      } else
        pLength += tLength
      page.trains &lt;&lt; train
    }
    return pages
  }

  def addTextPages(texts, pages) {
    for (text in texts) {
      if (text.type == "plain") {
        def str = text.text
        def page = new Page()
        page.text = true
        page.textStr = str
        pages &lt;&lt; page
      } else {
        // ignore all other typess
      }
    }
  }

  def addTitlePages(pages) {
    // title page
    def titlePage = new Page()
    titlePage.title = true
    titlePage.numbered = false
    titlePage.numberShown = false
    pages.add(0, titlePage)
    def secondPage = new Page()
    secondPage.numbered = false
    secondPage.numberShown = false
    if (trains.cycle != null)
      secondPage.cycle = true
    else
      secondPage.empty = true
    pages.add(1, secondPage);
  }

  // reorder pages
  def reorderPages(pages, sort) {
    def result = []
    if (sort == "one_side") {  // print on one side of paper first half, then second half
      int left = pages.size()
      int right = 1

      while (right &lt; (pages.size() / 2)) {
        result.add(pages[left-1])
        result.add(pages[right-1])
        left -= 2
        right +=2
      }

      left = pages.size() / 2
      right = (pages.size() / 2) + 1

      while (right &lt; pages.size()) {
        result.add(pages[left-1])
        result.add(pages[right-1])
        left -= 2
        right += 2
      }
    } else if (sort == "two_sides") { // print on both sides of the paper
      int left = pages.size()
      int right = 1
      boolean odd = true
      while (right &lt;= (pages.size() / 2)) {
        result.add(pages[(odd ? left : right) - 1])
        result.add(pages[(odd ? right : left) - 1])
        left--
        right++
        odd = !odd
      }
    }
    return result
  }

  // number pages
  def numberPages(pages) {
    def i = 1
    for (page in pages) {
      if (page.numbered)
        page.number = i++
    }
  }

  // add empty pages - the count has to be divisible by 4
  def addEmptyPages(pages) {
    def added = pages.size() % 4
    if (added != 0) {
      for (i in 1..(4 - added))
        pages.add(Page.emptyPage())
    }
  }

  // print all pages
  def printPages(pages, sort) {
    addEmptyPages(pages)
    numberPages(pages)
    pages = reorderPages(pages, sort)
    def i = pages.iterator()
    while (i.hasNext()) {
      def left = i.next()
      def right = i.next()
      printTwoPages(left, right, i.hasNext())
    }
  }

  // print two A5 pages on one A4
  def printTwoPages(pageLeft, pageRight, hasNext) {
    %&gt;
&lt;table class="two-pages${hasNext ? " page-break" :""}" cellspacing="0" cellpadding="0"&gt;
&lt;tr&gt;
    &lt;td class="header-l-l"&gt;${pageLeft.numberShown ? pageLeft.number : "&amp;nbsp;"}&lt;/td&gt;
    &lt;td class="header-l-r"&gt;${pageLeft.numberShown ? localization["header.publisher"].translate(locale) : "&amp;nbsp"}&lt;/td&gt;
    &lt;td class="header-r-l"&gt;${pageRight.numberShown ? localization["header.publisher"].translate(locale) : "&amp;nbsp"}&lt;/td&gt;
    &lt;td class="header-r-r"&gt;${pageRight.numberShown ? pageRight.number : "&amp;nbsp;"}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan="2" class="page-left"&gt;
&lt;% printPage(pageLeft) %&gt;
&lt;/td&gt;
&lt;td colspan="2" class="page-right"&gt;
&lt;% printPage(pageRight) %&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;&lt;%
  }

  // print page
  def printPage(page) {
    if (page.empty) {
      // do nothing
    } else if (page.title) {
      show_title(page)
    } else if (page.cycle) {
      show_cycle(page)
    } else if (page.text) {
      show_text(page)
    } else if (page.index) {
%&gt;
&lt;div class="index-title"&gt;${localization["train.list"].translate(locale)}&lt;/div&gt;
&lt;div class="spacer4"&gt;&amp;nbsp;&lt;/div&gt;
&lt;table class="index" border="0" cellspacing="0"&gt;
  &lt;tr&gt;
    &lt;td class="column-1"&gt;${localization["index.train"].translate(locale)}&lt;/td&gt;
    &lt;td class="column-2"&gt;${localization["index.page"].translate(locale)}&lt;/td&gt;
    &lt;td class="column-1"&gt;${localization["index.train"].translate(locale)}&lt;/td&gt;
    &lt;td class="column-2"&gt;${localization["index.page"].translate(locale)}&lt;/td&gt;
    &lt;td class="column-1"&gt;${localization["index.train"].translate(locale)}&lt;/td&gt;
    &lt;td&gt;${localization["index.page"].translate(locale)}&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class="column-1-delim"&gt;1&lt;/td&gt;
    &lt;td class="column-2-delim"&gt;2&lt;/td&gt;
    &lt;td class="column-1-delim"&gt;3&lt;/td&gt;
    &lt;td class="column-2-delim"&gt;4&lt;/td&gt;
    &lt;td class="column-1-delim"&gt;5&lt;/td&gt;
    &lt;td class="column-3-delim"&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class="column-1"&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td class="column-2"&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td class="column-1"&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td class="column-2"&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td class="column-1"&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
  &lt;/tr&gt;&lt;%
      int repeats = (PAGE_LENGTH - INDEX_HEADER - INDEX_FOOTER) / INDEX_LINE
      for (i in 0..(repeats-1)) {
        def tRow = []
        if (i &gt;= page.trains.size())
          break;
        tRow &lt;&lt; getTrainPageInfo(page.trains, i, locale)
        tRow &lt;&lt; getTrainPageInfo(page.trains, i + repeats, locale)
        tRow &lt;&lt; getTrainPageInfo(page.trains, i + repeats * 2, locale)
%&gt;
  &lt;tr&gt;
    &lt;td class="column-1"&gt;${tRow[0][0]}&lt;/td&gt;
    &lt;td class="column-2"&gt;${tRow[0][1]}&lt;/td&gt;
    &lt;td class="column-1"&gt;${tRow[1][0]}&lt;/td&gt;
    &lt;td class="column-2"&gt;${tRow[1][1]}&lt;/td&gt;
    &lt;td class="column-1"&gt;${tRow[2][0]}&lt;/td&gt;
    &lt;td&gt;${tRow[2][1]}&lt;/td&gt;
  &lt;/tr&gt;&lt;%
      }
%&gt;
&lt;/table&gt;&lt;%
    } else {
      def firsttt = true
      for (train in page.trains) {
        if (!firsttt) { %&gt;
&lt;div class="spacer6"&gt;&amp;nbsp;&lt;/div&gt;&lt;%
        }
        firsttt = false
        def colspan = (train.controlled == true) ? 10 : 8
        %&gt;
&lt;table class="tt" cellspacing="0" cellpadding="0"&gt;
  &lt;tr class="train-name"&gt;
    &lt;td class="train-name" colspan="${colspan}"&gt;${train.completeName.translate(locale)}&lt;%
      if (train.routeInfo != null &amp;&amp; train.routeInfo.size() &gt; 0) {%&gt;&lt;br&gt;
      &lt;span class="train-route"&gt;&lt;%
        def first = true
        for (info in train.routeInfo) { %&gt;${!first ? " &amp;mdash; " : ""}${info.highlighted ? "&lt;span class=\"route-emph\"&gt;" : ""}${info.part}${info.highlighted ? "&lt;/span&gt;" : ""}&lt;%
          first = false
        }%&gt;&lt;/span&gt;&lt;%
      } %&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td colspan="${colspan}"&gt;
      &lt;table cellpadding="0" cellspacing="0" class="wl"&gt;&lt;%
        def fwt = true
        if (train.weightData != null) {
        lastEngine = null
        for (wr in train.weightData) {
          currentEngine = concat(wr.engines, ", ") %&gt;
        &lt;tr&gt;
          &lt;td&gt;${(currentEngine != "" &amp;&amp; currentEngine != lastEngine) ? (localization[train.diesel ? "diesel.unit" : "engine"].translate(locale) + " " + currentEngine + ". &amp;nbsp;") : ""}&lt;/td&gt;
          &lt;td&gt;${(wr.weight != null &amp;&amp; (fwt || (currentEngine != "" &amp;&amp; currentEngine != lastEngine))) ? localization["norm.load"].translate(locale) + ": &amp;nbsp;" : ""}&lt;/td&gt;
          &lt;td&gt;${wr.from != null &amp;&amp; wr.to != null ? wr.from + " - " + wr.to + " &amp;nbsp;" : ""}&lt;/td&gt;
          &lt;td align="right"&gt;${wr.weight != null ? wr.weight + " " + localization["tons"].translate(locale) : ""}&lt;/td&gt;
        &lt;/tr&gt;&lt;%
          fwt = false
          lastEngine = currentEngine
        }
        }
        if (train.lengthData != null) {
          if (train.lengthData.length % 2 == 1)
            train.lengthData.length = train.lengthData.length - 1%&gt;
        &lt;tr&gt;
          &lt;td colspan="4"&gt;${localization["length"].translate(locale)}: ${train.lengthData.length} ${train.lengthData.lengthInAxles ? localization["length.axles"].translate(locale) : train.lengthData.lengthUnit.getUnitsOfString(locale)}&lt;/td&gt;
        &lt;/tr&gt;&lt;%
        } %&gt;
      &lt;/table&gt;
    &lt;/td&gt;
  &lt;/tr&gt;&lt;%
  if (train.controlled) { %&gt;
  &lt;tr class="hline"&gt;
    &lt;td class="tc-d3-1 tc-delim-1"&gt;1&lt;/td&gt;
    &lt;td class="tc-d3-2 tc-delim-1"&gt;2&lt;/td&gt;
    &lt;td class="tc-d3-2 tc-delim-1"&gt;2a&lt;/td&gt;
    &lt;td class="tc-d3-3 tc-delim-1"&gt;3&lt;/td&gt;
    &lt;td class="tc-d3-4 tc-delim-1"&gt;4&lt;/td&gt;
    &lt;td class="tc-d3-5 tc-delim-1"&gt;5&lt;/td&gt;
    &lt;td class="tc-d3-6 tc-delim-1"&gt;6&lt;/td&gt;
    &lt;td class="tc-d3-7 tc-delim-1"&gt;7&lt;/td&gt;
    &lt;td class="tc-d3-8 tc-delim-1"&gt;8&lt;/td&gt;
    &lt;td class="tc-d3-9 tc-delim-1"&gt;9&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr class="hline"&gt;
    &lt;td class="tc-d3-1"&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td class="tc-d3-2"&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td class="tc-d3-2a"&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td class="tc-d3-3"&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td class="tc-d3-4"&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td class="tc-d3-5"&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td class="tc-d3-6"&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td class="tc-d3-7"&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td class="tc-d3-8"&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td class="tc-d3-9"&gt;&amp;nbsp;&lt;/td&gt;
  &lt;/tr&gt;&lt;%
  } else { %&gt;
  &lt;tr class="hline"&gt;
    &lt;td class="tc-1 tc-delim-1"&gt;1&lt;/td&gt;
    &lt;td class="tc-2 tc-delim-1"&gt;2&lt;/td&gt;
    &lt;td class="tc-3 tc-delim-1"&gt;3&lt;/td&gt;
    &lt;td class="tc-4 tc-delim-1"&gt;4&lt;/td&gt;
    &lt;td class="tc-5 tc-delim-1"&gt;5&lt;/td&gt;
    &lt;td class="tc-6 tc-delim-1"&gt;6&lt;/td&gt;
    &lt;td class="tc-7 tc-delim-1"&gt;7&lt;/td&gt;
    &lt;td class="tc-8 tc-delim-1"&gt;8&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr class="hline"&gt;
    &lt;td class="tc-1"&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td class="tc-2"&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td class="tc-3"&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td class="tc-4"&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td class="tc-5"&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td class="tc-6"&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td class="tc-7"&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td class="tc-8"&gt;&amp;nbsp;&lt;/td&gt;
  &lt;/tr&gt;&lt;%
  }
  def rowL = train.rows.size() - 1
  def cnt = 0
  def lastSpeed = null
  def lastSpeed2 = null
  def isSpeed2 = false
  def fromT = new Time()
  def toT = new Time()
  def stopDur = new Duration()
  def runDur = new Duration()
  def lastTo = null
  def lastLineClass = null
  def cChar = "*"
  def fChar = "&amp;dagger;"
  for (row in train.rows) {
    def speed = row.setSpeed != null ? row.setSpeed : row.speed
    def speed2 = row.speed
    isSpeed2 = isSpeed2 || speed != speed2
    def emphName = (cnt == 0) || (cnt == rowL) || row.stationType == "branch.station"
    def speedStr = ((lastSpeed == null || lastSpeed != speed) &amp;&amp; speed != null) ?  speed : "&amp;nbsp;"
    fromT.compute(row.arrival, cnt == rowL, row.arrival != row.departure)
    toT.compute(row.departure, false, true)
    def stationName = row.station
    def desc = ""
    if (row.stationType == "stop.with.freight") stationName += " ${localization['abbr.stop.freight'].translate(locale)}"
    if (row.stationType == "stop") stationName += " ${localization['abbr.stop'].translate(locale)}"
    if (emphName) stationName = "&lt;span class=\"emph\"&gt;${stationName}&lt;/span&gt;"
    if (row.straight == false &amp;&amp; !row.lightSignals) desc += "&amp;rarr;"
    if (row.lightSignals) { desc += "&lt;img src=\"signal.gif\" class=\"signal\"&gt;"; images.add("signal.gif")}
    if (train.controlled &amp;&amp; row.firstConcurrent != null &amp;&amp; !row.firstConcurrent) {
      desc += "&lt;img src=\"trapezoid_sign.gif\" class=\"trapezoid\"&gt;"
      images.add("trapezoid_sign.gif")
    }
    if (row.lineEnd) desc += "&amp;Delta;"
    if (row.occupied) desc += "&amp;Omicron;"
    if (row.shunt) desc += "&amp;loz;"
    if (row.comment != null) {desc += cChar; cChar += "*"}
    if (settings['freight'] &amp;&amp; row.freightDest != null) {desc += fChar; fChar += "&amp;dagger;"}
    if (desc == "") desc = "&amp;nbsp;"
    def speed2Str = (lastSpeed2 == null || lastSpeed2 != speed2) &amp;&amp; speed2 != null &amp;&amp; isSpeed2 ? speed2 : null;
    def lineClassStr = "&amp;nbsp;"
    if ((lastLineClass == null || (lastLineClass != row.lineClass)) &amp;&amp; row.lineClass != null) {
      lineClassStr += row.lineClass
      if (isSpeed2)
        lineClassStr += "/" + speed2
    } else if (speed2Str != null) {
        lineClassStr += (row.lineClass != null ? row.lineClass : "-") + "/" + speed2Str
    }
    lastLineClass = row.lineClass
    if (train.controlled) {
      def showTrack = row.track != null &amp;&amp; !row.controlStation &amp;&amp; row.onControlled
      def tTrains = null
      if (row.concurrentTrains != null) {
        for (tTrain in row.concurrentTrains) {
          if (tTrains == null) tTrains = ""
          else tTrains += ", "
          tTrains += tTrain.translate(locale).replaceAll(' ','&amp;nbsp;')
        }
      }
      if (tTrains == null) tTrains = "&amp;nbsp;"
      if (row.controlStation) images.add("control_station.gif") %&gt;
  &lt;tr class="line"&gt;
    &lt;td class="tc-d3-1 tc-m-1"&gt;${stationName}${row.controlStation ? " &lt;img src=\"control_station.gif\" class=\"control\"&gt;" : ""}&lt;/td&gt;
    &lt;td class="tc-d3-2 tc-m-2"&gt;${desc}&lt;/td&gt;
    &lt;td class="tc-d3-2a tc-m-2a"&gt;${showTrack ? row.track : "&amp;nbsp;"}&lt;/td&gt;
    &lt;td class="tc-d3-3 tc-m-3"&gt;${runDur.show(lastTo, row.arrival)}&lt;/td&gt;
    &lt;td class="tc-d3-4 tc-m-4"&gt;${fromT.out}&lt;/td&gt;
    &lt;td class="tc-d3-5 tc-m-5"&gt;${stopDur.show(row.arrival,row.departure)}&lt;/td&gt;
    &lt;td class="tc-d3-6 tc-m-6"&gt;${toT.out}&lt;/td&gt;
    &lt;td class="tc-d3-7 tc-m-7"&gt;${speedStr}&lt;/td&gt;
    &lt;td class="tc-d3-8 tc-m-8"&gt;${lineClassStr}&lt;/td&gt;
    &lt;td class="tc-d3-9 tc-m-9"&gt;${tTrains}&lt;/td&gt;
  &lt;/tr&gt;&lt;%
    } else { %&gt;
  &lt;tr class="line"&gt;
    &lt;td class="tc-1 tc-m-1"&gt;${stationName}&lt;/td&gt;
    &lt;td class="tc-2 tc-m-2"&gt;${desc}&lt;/td&gt;
    &lt;td class="tc-3 tc-m-3"&gt;${runDur.show(lastTo, row.arrival)}&lt;/td&gt;
    &lt;td class="tc-4 tc-m-4"&gt;${fromT.out}&lt;/td&gt;
    &lt;td class="tc-5 tc-m-5"&gt;${stopDur.show(row.arrival,row.departure)}&lt;/td&gt;
    &lt;td class="tc-6 tc-m-6"&gt;${toT.out}&lt;/td&gt;
    &lt;td class="tc-7 tc-m-7"&gt;${speedStr}&lt;/td&gt;
    &lt;td class="tc-8 tc-m-8"&gt;${lineClassStr}&lt;/td&gt;
  &lt;/tr&gt;&lt;%
    }
    cnt++
    lastSpeed = speed
    lastSpeed2 = speed2
    lastTo = row.departure
  }
  def timeTotal = stopDur.total + runDur.total
  def totalHours = (int) (timeTotal / 60)
  def totalMinutes = timeTotal - totalHours * 60
  def totalMinutesStr = Duration.show(totalMinutes)
%&gt;
  &lt;tr class="fline"&gt;
    &lt;td colspan="${colspan / 2 - 2}" class="totalt"&gt;${localization["total.train.time"].translate(locale)} &amp;nbsp;. . . &amp;nbsp;&lt;/td&gt;
    &lt;td class="totalt emph"&gt;${runDur.showTotal()}&lt;/td&gt;
    &lt;td class="totali"&gt;+&lt;/td&gt;
    &lt;td class="totalt"&gt;${stopDur.showTotal()}&lt;/td&gt;
    &lt;td colspan="${colspan / 2 - 1}" class="totalv"&gt;&amp;nbsp;= ${totalHours != 0 ? totalHours + " " : ""}${totalHours != 0 ? localization["hours"].translate(locale) + " " : ""}${totalMinutes != 0 ? totalMinutesStr : ""}${totalMinutes != 0 ? localization["minutes"].translate(locale) : ""}&lt;/td&gt;
  &lt;/tr&gt;&lt;%
  comments = createComments(train)
  for (comment in comments) { %&gt;
  &lt;tr class="cline"&gt;&lt;td colspan="${colspan}"&gt;&lt;div class="symbol"&gt;${comment[0]}&lt;/div&gt;&lt;div&gt;= ${comment[1]}&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;%
  } %&gt;
&lt;/table&gt;&lt;%
      }
    }
  }

  class Time {
    def hour
    def out = "&amp;nbsp;"
    static org.joda.time.format.DateTimeFormatter FORMATTER = org.joda.time.format.ISODateTimeFormat.hourMinuteSecond()
    static org.joda.time.format.DateTimeFormatter PRINT_FORMATTER = new org.joda.time.format.DateTimeFormatterBuilder().appendHourOfDay(1).appendLiteral(' ').appendMinuteOfHour(2).toFormatter();

    def compute(timeStr, forceShowHour, show) {
      def parsed = parse(timeStr)
      if (parsed == null)
        out = "&amp;nbsp;"
      else {
        def result
        if (parsed.hourOfDay != hour || forceShowHour)
          result = PRINT_FORMATTER.print(parsed)
        else
          result = parsed.minuteOfHour

        if (show)
          hour = parsed.hourOfDay

        if (parsed.secondOfMinute != 0) {
          def part = (int) (parsed.secondOfMinute / 60.0 * 10)
          result += "&lt;span class=\"s2\"&gt;${part}&lt;/span&gt;"
        } else {
          result += "&amp;nbsp;"
        }
        out = show ? result : "&amp;nbsp;"
      }
    }

    def static parse(str) {
      if (str == null)
        return null
      else {
        return FORMATTER.parseLocalTime(str)
      }
    }
  }

  class Duration {
    def total = 0

    def show(from,to) {
      if (from == null || to ==null)
        return "&amp;nbsp;"
      def f = Time.parse(from)
      def t = Time.parse(to)
      def period = new org.joda.time.Period(f,t);
      if (t &lt; f) {
        period = period.plusDays(1).normalizedStandard();
      }
      double dur = period.toStandardMinutes().minutes
      dur += period.seconds / 60
      total += dur
      return Duration.show(dur)
    }

    def showTotal() {
      return Duration.show(total)
    }

    def static show(dur) {
      // convert to html
      if (dur == null || dur == 0)
        return "&amp;nbsp;"
      else {
        def minutes = (int) dur
        def seconds = (int) (dur - minutes) * 10
        def str = minutes + (seconds == 0 ?  "&amp;nbsp;" : "&lt;span class=\"s1\"&gt;${seconds}&lt;/span&gt;")
        return str
      }
    }
  }

  def getTrainPageInfo(trains, index, locale) {
    if (index &lt; trains.size())
      return [trains[index][0].name.translate(locale), trains[index][1].number]
    else
      return ["&amp;nbsp;","&amp;nbsp;"]
  }

  def createComments(train) {
    def symbol = "*";
    def fSymbol = "&amp;dagger;"
    def list = []
    def shunt = false
    def occupied = false
    def lineEnd = false
    for (row in train.rows) {
      if (!lineEnd &amp;&amp; row.lineEnd) {
        list &lt;&lt; ["&amp;Delta;", localization["entry.line.end"].translate(locale)]
        lineEnd = true
      }
      if (!occupied &amp;&amp; row.occupied) {
        list &lt;&lt; ["&amp;Omicron;",localization["entry.occupied"].translate(locale)]
        occupied = true
      }
      if (!shunt &amp;&amp; row.shunt) {
        list &lt;&lt; ["&amp;loz;",localization["entry.shunt"].translate(locale)]
        shunt = true
      }
      if (row.comment != null) {
        list &lt;&lt; [symbol, row.comment.translate(locale)]
        symbol += "*"
      }
      if (settings['freight'] &amp;&amp; row.freightDest != null) {
        list &lt;&lt; [fSymbol, engineLeft ? "&amp;larr; ${convertFreight(row.freightDest.reverse())}" : "${convertFreight(row.freightDest)} &amp;rarr;"]
        fSymbol += "&amp;dagger;"
      }
    }
    return list
  }

  def convertFreight(freightDest) {
      return freightDest.collect{i -&gt; convertFreightDest(i)}.join(', ')
  }

  def convertFreightDest(i) {
      def str = "${i.toString(locale, true)}${i.center ? '(' + i.regions.join(', ') + ')' : ''}"
      return i.center ? "&lt;b&gt;${str}&lt;/b&gt;" : str
  }

  def show_title(page) {
      def company = getCompany(trains.cycle, locale)
      def company_part = getCompanyPart(trains.cycle, locale)
    %&gt;
&lt;table class="titlepage" border="0" cellspacing="0"&gt;
  &lt;tr&gt;&lt;td class="company"&gt;${company}&lt;br&gt;${company_part}&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td class="space1"&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td class="gtitle"&gt;${localization["train.timetable"].translate(locale)}&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td class="numbers"&gt;${getRouteNames(trains)}&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td class="line"&gt;${localization["for.line"].translate(locale)}&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td class="stations"&gt;${getRoutePaths(trains)}&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td class="valid"&gt;&lt;% if (trains.validity != null) { %&gt;${localization["validity.from"].translate(locale)} ${trains.validity}&lt;% } else { %&gt;&amp;nbsp;&lt;% } %&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td class="cycle"&gt;&lt;% if (trains.cycle != null) { %&gt;${localization["cycle"].translate(locale)}: ${trains.cycle.name}&lt;% } else { %&gt;&amp;nbsp;&lt;% } %&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td class="cycledesc"&gt;&lt;% if (trains.cycle != null) { %&gt;${trains.cycle.description ?: "&amp;nbsp;"}&lt;% } else { %&gt;&amp;nbsp;&lt;% } %&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td class="space2"&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td class="publish"&gt;${localization["publisher"].translate(locale)}&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;%
  }

  // returns names of routes
  def getRouteNames(trains) {
    def result = ""
    def routeNames = [] as Set
    if (trains.routes != null &amp;&amp; !trains.routes.isEmpty()) {
      for (route in trains.routes) {
        if (!routeNames.contains(route.name)) {
          result = add(result,"&lt;br&gt;",route.name)
          routeNames &lt;&lt; route.name
        }
      }
    } else {
      result = (trains.routeNumbers == null) ? "-" : trains.routeNumbers.replace("\n","&lt;br&gt;")
    }
    return result
  }

  // returns paths of routes
  def getRoutePaths(trains) {
    def result = ""
    if (trains.routes != null &amp;&amp; !trains.routes.isEmpty()) {
      for (route in trains.routes) {
        def stationsStr = null
        stationsStr = add(stationsStr," - ",route.segments.first().name)
        stationsStr = add(stationsStr," - ",route.segments.last().name)
        result = add(result,"&lt;br&gt;",stationsStr)
      }
    } else {
      result = (trains.routeStations == null) ? "-" : trains.routeStations.replace("\n","&lt;br&gt;")
    }
    return result
  }

  def add(str, delimiter, value) {
    if (str == null || str.isEmpty())
      str = value
    else
      str += delimiter + value
    return str
  }

  def show_cycle(page) {
    %&gt;
&lt;table class="list2" border="0" cellspacing="0" align="center"&gt;
  &lt;tr&gt;
    &lt;td colspan="4"&gt;${localization["list.train.title"].translate(locale)}:&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr class="listh"&gt;
    &lt;td class="ctrainh"&gt;${localization["column.train"].translate(locale)}&lt;/td&gt;
    &lt;td class="cdepartureh"&gt;${localization["column.departure"].translate(locale)}&lt;/td&gt;
    &lt;td class="cfromtoh"&gt;${localization["column.from.to"].translate(locale)}&lt;/td&gt;
    &lt;td class="cnoteh"&gt;${localization["column.note"].translate(locale)}&lt;/td&gt;
  &lt;/tr&gt;&lt;% lastNode = null;
          def abbrMap = [:]
          for (item in trains.cycle.rows) {
            abbrMap[item.fromAbbr] = item.from
            abbrMap[item.toAbbr] = item.to
            if (lastNode != null &amp;&amp; lastNode != item.from) {
              %&gt;
  &lt;tr&gt;
    &lt;td colspan="4" class="move"&gt;&amp;mdash;  ${localization["move.to.station"].translate(locale)} ${item.from} &amp;mdash; &lt;/td&gt;
  &lt;/tr&gt;&lt;%
            }
        %&gt;
  &lt;tr&gt;
    &lt;td class="ctrain"&gt;${item.trainName.translate(locale)}&lt;/td&gt;
    &lt;td class="cdeparture"&gt;${convertTime(item.fromTime)}&lt;/td&gt;
    &lt;td class="cfromto"&gt;${item.fromAbbr} - ${item.toAbbr}&lt;/td&gt;
    &lt;td class="cnote"&gt;${getComment(item.comment, locale)}&lt;/td&gt;
  &lt;/tr&gt;&lt;%   lastNode = item.to
          }%&gt;
  &lt;tr&gt;
    &lt;td colspan="4"&gt;&amp;nbsp;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td colspan="4"&gt;
      &lt;table cellspacing="0" border="0"&gt;&lt;%
          abbrMap.sort().each {
            %&gt;
        &lt;tr class="listabbr"&gt;
          &lt;td&gt;${it.key}&lt;/td&gt;&lt;td&gt;&amp;nbsp;- ${it.value}&lt;/td&gt;
        &lt;/tr&gt;&lt;%
          }
        %&gt;
      &lt;/table&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;&lt;%
  }

  def show_text(page) {
    %&gt;
&lt;div class="text-page"&gt;&lt;%
    print page.textStr %&gt;
&lt;/div&gt;&lt;%
    // collect images
    for (i in (page.textStr =~ /src="(.*?)"/)) {
      images.add(i[1])
    }
  }

  def concat(strs, delim) {
    result = strs.inject("") {
      str, item -&gt;
        if (str != "")
          str += delim
        str + item
    }
    return result
  }
  def getCompany(cycle, loc) {
    def company = cycle?.company?.name
    company = company ?: cycle?.company?.abbr
    return company ?: localization["company"].translate(loc)
  }

  def getCompanyPart(cycle, loc) {
    def part = cycle?.company?.part
    if (!part &amp;&amp; !cycle?.company?.abbr) {
        part = localization["company.part"].translate(loc)
    }
    return part ?: "&amp;nbsp;"
  }

  def getComment(comment, loc) {
    if (comment) {
        comment = comment.translate(loc)
    }
    return comment ?: "&amp;nbsp;"
  }
%&gt;
</template>
            <language>GROOVY</language>
        </template>
        <script>
            <source_code>for (cycle in diagram.driverCycleType.cycles) {
    outputs.create()
        .setName("${cycle}.html")
        .setParams(["driver_cycle":cycle])
        .setDirectory(key)
}</source_code>
            <language>GROOVY</language>
        </script>
        <attachment name="control_station.gif" type="BINARY">
            <binaryData>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</binaryData>
        </attachment>
        <attachment name="signal.gif" type="BINARY">
            <binaryData>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</binaryData>
        </attachment>
        <attachment name="trapezoid_sign.gif" type="BINARY">
            <binaryData>R0lGODlheAB5AOelAAAAAAEBAQICAgMDAwQEBAUFBQYGBgcHBwkJCQoKCgwMDA0NDQ4ODg8PDxAQEBERERISEhMTExQUFBUVFRcXFxgYGBkZGRsbGxwcHB0dHR8fHyAgICIiIiUlJScnJygoKCkpKSsrKywsLC0tLS4uLi8vLzExMTMzMzQ0NDU1NTc3Nzk5OTo6Oj09PT4+PkBAQEJCQkREREZGRkdHR0lJSUpKSktLS05OTlBQUFJSUlRUVFVVVVZWVlhYWFpaWltbW15eXl9fX2FhYWNjY2RkZGVlZWdnZ2hoaGpqamtra25ubm9vb3JycnNzc3R0dHZ2dnd3d3l5eXp6ent7e3x8fICAgIKCgoSEhIWFhYaGhoeHh4iIiImJiYuLi4yMjI+Pj5CQkJOTk5WVlZaWlpmZmZqampubm5ycnKGhoaOjo6ampqenp6ioqKmpqaqqqqurq62tra+vr7CwsLGxsbS0tLa2tre3t7q6uru7u729vcHBwcLCwsPDw8fHx8jIyMnJycrKysvLy8zMzM3NzdDQ0NHR0dTU1NbW1tfX19nZ2dra2tzc3N/f3+Dg4OPj4+Tk5OXl5ebm5ufn5+jo6Orq6uzs7O3t7e7u7vDw8PHx8fPz8/T09Pb29vf39/j4+Pn5+fr6+vv7+/z8/P39/f7+/v///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////yH5BAEKAP8ALAAAAAB4AHkAAAj+AEsJHEiwoMGDCBMqXMiwocOHECNKnEixosWHjqBo3Mixo8ePIEOK9MjmokmFUACoXMmypcuXMGPKdOlg08mbBDlBmMmzp0+eY3AKPfOzqNGfH0gJvVniqNOnL+0sNbkHqlWrM6Ze3HG169EAiLRSdETAq9mfR8ROnHK2Lc8El9RC9DTBrd2YXOQ+RHO3r8sMofQ2ROG38Eo3ghf2McyYRWKFPnreQUS5suXLmDNr1syjJ6DHByUV4AkDtMFBPX+YLlilZ5zVBVvwLBAJdilQFnhqEGV7IJyeVGyr6Zm3t0BRG3hK6AR7BU8ElowP9NLzzGpBPYdIH4hJAc8Rq4P+9CS0fWCSnnlAUzrAs0X5gYkC8LwBGktPxO8F1uApYFHiUBjwhEFg+ZVyR09KJPZGT1cUOFAIPC2QiWAu8HQAJQ4KREZPX+hVSE9AZCgQJxHwxMEochHRUyAiChRFT3KodQkCPK3QokBk8fSCWl30pMaNAvUwnlajJDdTBaAAWcpiPAmh1Rw9VaGkQCpYiOFSMcwmyZSlrNGTFUsd0pMPXJYSygU8VfCJUEj01EeZpWTRUxo4ZeLdTCjAWUolNM50Ak5g9ISGnqUU0RMfJ5HSAU8TeEKoIT3pcFIdPU1BqEBZzjRAIybRwBMBj1xaCh09OXGRIvLNtIOopSjKU03+Fi3R0x6slhJGT2JUpAkDPJVQaymaNMCTB0pNJEZ1v5bSRE91UAQCTxBwkiwjA/Akw0R49PREsgLlwFMAh0h0A0+bcluKHj0ZEREjAvCEg7kCmfBWdA85gR68pfDF0xYPcfIATyHgW8onFPAEmENl9KTBDAw37PDDEEcs8cQUV0xxBT214RAJjHV8l40MoevxyG39wZAOJKfsFZkK5ajyy08VAIlCUsBss1NSJETXzTz/tBxC+vYs9ExmIJTC0EjHJMJBfiTt9Et4GPTD01SvZENBkxhQddUBKELQFgeELfbYZJdt9tlom601TGm37fbbZTMBJCMwNSCwXnS/ZPfU3Wrl7dLefGvld0uAB77U4CwVbjhOiK+k+OInNa7S45BfJDkAlFde0eWZaz4R557fBHroJo1OukWmn05R6qpLxHrrEL0Ou0Oyz85Q7bYrhHvuCO3Ou0G+/05Q8MILRHzxxwuf/O/L89587s/bHv3s08NefevXq5796duT3n3o33sevubjV14+5Ocvnr7h6wfePt/v3x2/wPPjWz+895ubP7f7T1t38Q3BhBYGSMABdgiACCzePxbIwAY68IEQjKAEJ0jBClrwghjMoAY3yMEOelCCAQEAOw==</binaryData>
        </attachment>
        <attributes>
            <attribute>
                <key>name</key>
                <type>localized.string</type>
                <value type="string">Timetables for circulations of drivers</value>
                <value type="string.cs">Sešitové jízdní řády pro turnusy</value>
            </attribute>
            <attribute>
                <key>key</key>
                <value type="string">trains_per_circulation_html</value>
            </attribute>
            <attribute>
                <key>output.type</key>
                <value type="string">trains</value>
            </attribute>
            <attribute>
                <key>output</key>
                <value type="string">groovy</value>
            </attribute>
            <attribute>
                <key>description</key>
                <type>localized.string</type>
                <value type="string">Timetables for circulations of drivers</value>
                <value type="string.cs">Sešitové jízdní řády pro turnusy</value>
            </attribute>
            <attribute>
                <key>diesel.unit</key>
                <type>localized.string</type>
                <value type="string">Diesel unit</value>
                <value type="string.bg">Дизелова мотриса</value>
                <value type="string.cs">Motorový vůz</value>
                <value type="string.de">Triebwagen</value>
                <value type="string.hu">Motor kocsi</value>
                <value type="string.pl">lok.</value>
                <value type="string.sk">Motorový voz</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>engine</key>
                <type>localized.string</type>
                <value type="string">Engine</value>
                <value type="string.bg">Локомотив</value>
                <value type="string.cs">Lok.</value>
                <value type="string.de">Tfz</value>
                <value type="string.hu">Mozd</value>
                <value type="string.pl">lok.</value>
                <value type="string.sk">Lok.</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>train.list</key>
                <type>localized.string</type>
                <value type="string">List of trains</value>
                <value type="string.bg">Списък с влакове</value>
                <value type="string.cs">Seznam vlaků</value>
                <value type="string.de">Liste der Züge</value>
                <value type="string.hu">Vonat lista</value>
                <value type="string.pl">Zestawienie pociągów</value>
                <value type="string.sk">Zoznam vlakov</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>index.train</key>
                <type>localized.string</type>
                <value type="string">Train</value>
                <value type="string.bg">Влак</value>
                <value type="string.cs">Vlak</value>
                <value type="string.de">Zug</value>
                <value type="string.hu">Vonat</value>
                <value type="string.pl">Pociąg</value>
                <value type="string.sk">Vlak</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>index.page</key>
                <type>localized.string</type>
                <value type="string">Page</value>
                <value type="string.bg">Страница</value>
                <value type="string.cs">Strana</value>
                <value type="string.de">Seite</value>
                <value type="string.hu">Oldal</value>
                <value type="string.pl">Strona</value>
                <value type="string.sk">Strana</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>total.train.time</key>
                <type>localized.string</type>
                <value type="string">Sum</value>
                <value type="string.bg">Сума</value>
                <value type="string.cs">Úhrnem</value>
                <value type="string.de">zusammen</value>
                <value type="string.hu">Együtt</value>
                <value type="string.pl">Razem</value>
                <value type="string.sk">Spolu</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>hours</key>
                <type>localized.string</type>
                <value type="string">hours</value>
                <value type="string.bg">часове</value>
                <value type="string.cs">hod.</value>
                <value type="string.de">Std.</value>
                <value type="string.hu">óra</value>
                <value type="string.pl">godz.</value>
                <value type="string.sk">hod.</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>minutes</key>
                <type>localized.string</type>
                <value type="string">minutes</value>
                <value type="string.bg">минути</value>
                <value type="string.cs">min.</value>
                <value type="string.de">Min.</value>
                <value type="string.hu">perc</value>
                <value type="string.pl">min.</value>
                <value type="string.sk">min.</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>abbr.stop</key>
                <type>localized.string</type>
                <value type="string">s</value>
                <value type="string.bg">сп.</value>
                <value type="string.cs">z</value>
                <value type="string.de">Hp</value>
                <value type="string.hu">-ig</value>
                <value type="string.pl">po</value>
                <value type="string.sk">z</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>abbr.stop.freight</key>
                <type>localized.string</type>
                <value type="string">fs</value>
                <value type="string.bg">тг</value>
                <value type="string.cs">nz</value>
                <value type="string.de">Hst</value>
                <value type="string.hu">nz</value>
                <value type="string.pl">lpo</value>
                <value type="string.sk">nz</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>tons</key>
                <type>localized.string</type>
                <value type="string">tons</value>
                <value type="string.bg">тона</value>
                <value type="string.cs">tun</value>
                <value type="string.de">Tonnen</value>
                <value type="string.hu">tonna</value>
                <value type="string.pl">ton</value>
                <value type="string.sk">ton</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>norm.load</key>
                <type>localized.string</type>
                <value type="string">Load norm</value>
                <value type="string.bg">Норма товарене</value>
                <value type="string.cs">Norma zatížení</value>
                <value type="string.de">Last norm</value>
                <value type="string.hu">Terhelési előírás</value>
                <value type="string.pl">Masa</value>
                <value type="string.sk">Norma zaťaženia</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>entry.line.end</key>
                <type>localized.string</type>
                <value type="string">regular arrival to line end</value>
                <value type="string.bg">пристига в глух коловоз</value>
                <value type="string.cs">pravidelný vjezd na kusou kolej</value>
                <value type="string.de">regelmäßige Eingang auf Stumpfgleis</value>
                <value type="string.hu">menetrend szerint csonkavágányra érkezik</value>
                <value type="string.pl">możliwy wjazd na ślepy tor</value>
                <value type="string.sk">pravidelný vjazd na kusú koľaj</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>entry.occupied</key>
                <type>localized.string</type>
                <value type="string">regular arrival to occupied track</value>
                <value type="string.bg">пристига в зает коловоз</value>
                <value type="string.cs">pravidelný vjezd na obsazenou kolej</value>
                <value type="string.de">RegelmäßigeEingang auf das besetzte Gleis</value>
                <value type="string.hu">menetrend szerint foglaltra jár</value>
                <value type="string.pl">możliwy wjazd na tor zajęty przez inny pociąg</value>
                <value type="string.sk">pravidelný vjazd na obsadenú koľaj</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>entry.shunt</key>
                <type>localized.string</type>
                <value type="string">shunting on departure side, go carefully</value>
                <value type="string.bg">маневра в изходна гърловина, карай внимателно</value>
                <value type="string.cs">na odjezdové straně se posunuje, vjíždějte opatrně</value>
                <value type="string.de">auf den Abfahrtseite ist Verschieben, einfahren vorsichtig</value>
                <value type="string.hu">bejárás közben tolatás</value>
                <value type="string.pl">Uwaga na manewrujące składy!</value>
                <value type="string.sk">na odjazdovej strane sa posunuje, vchádzajte opatrne</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>length</key>
                <type>localized.string</type>
                <value type="string">Length norm</value>
                <value type="string.bg">Норматив дължина</value>
                <value type="string.cs">Normativ délky</value>
                <value type="string.de">Normativ Länge</value>
                <value type="string.hu">Normatív hossz</value>
                <value type="string.pl">Długość</value>
                <value type="string.sk">Normatív dĺžky</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>length.axles</key>
                <type>localized.string</type>
                <value type="string">axles</value>
                <value type="string.bg">оси</value>
                <value type="string.cs">náprav</value>
                <value type="string.de">Achsen</value>
                <value type="string.hu">tengelyszám</value>
                <value type="string.pl">osi</value>
                <value type="string.sk">náprav</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>header.publisher</key>
                <type>localized.string</type>
                <value type="string">OstraMo</value>
                <value type="string.cs">OstraMo</value>
                <value type="string.de">OstraMo</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>internal.use</key>
                <type>localized.string</type>
                <value type="string">For internal use only</value>
                <value type="string.bg">Само за вътрешна употреба</value>
                <value type="string.cs">Jen pro služební potřebu</value>
                <value type="string.de">Nur für den Dienstgebrauch</value>
                <value type="string.hu">Csak szolgálati használatra</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>circulation.start</key>
                <type>localized.string</type>
                <value type="string">Start</value>
                <value type="string.bg">Начало</value>
                <value type="string.cs">Nástup</value>
                <value type="string.de">Dienstbeginn</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>title</key>
                <type>localized.string</type>
                <value type="string">Circulations of engineers</value>
                <value type="string.bg">Циркулации на машнисти</value>
                <value type="string.cs">Turnusy</value>
                <value type="string.de">Turnusen</value>
                <value type="string.hu">Turnus</value>
                <value type="string.pl">Plany Pracy</value>
                <value type="string.sk">Turnusy</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>publisher</key>
                <type>localized.string</type>
                <value type="string">Nakladatelství OstraMo - Ostrava</value>
                <value type="string.bg">Издател OstraMo - Ostrava</value>
                <value type="string.cs">Nakladatelství OstraMo - Ostrava</value>
                <value type="string.de">Nakladatelství OstraMo - Ostrava</value>
                <value type="string.hu">Szerkesztő</value>
                <value type="string.pl">www.fremo.pl</value>
                <value type="string.sk">Nakladatelstvo OstraMo - Ostrava</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>company</key>
                <type>localized.string</type>
                <value type="string">ČESKOSLOVENSKÉ STÁTNÍ DRÁHY</value>
                <value type="string.bg">Български Държавни Железници</value>
                <value type="string.cs">ČESKOSLOVENSKÉ STÁTNÍ DRÁHY</value>
                <value type="string.de">Östereichische Bundesbahnen</value>
                <value type="string.hu">MÁV</value>
                <value type="string.pl">Polskie Koleje Państwowe</value>
                <value type="string.sk">ČESKOSLOVENSKÉ ŠTÁTNE DRÁHY</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>company.part</key>
                <type>localized.string</type>
                <value type="string">Střední dráha</value>
                <value type="string.bg">БДЖ</value>
                <value type="string.cs">Střední dráha</value>
                <value type="string.de">Wien</value>
                <value type="string.hu">Ide johet MAV resze</value>
                <value type="string.pl">PKP</value>
                <value type="string.sk">Východná dráha</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>validity.from</key>
                <type>localized.string</type>
                <value type="string">Valid from</value>
                <value type="string.bg">Важи от</value>
                <value type="string.cs">Platí od</value>
                <value type="string.de">Gültig ab</value>
                <value type="string.hu">Érvényes -től</value>
                <value type="string.pl">ważny w dniach</value>
                <value type="string.sk">Platí od</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>cycle</key>
                <type>localized.string</type>
                <value type="string">Circulation of engineers</value>
                <value type="string.bg">Циркулация на машинисти</value>
                <value type="string.cs">Turnus</value>
                <value type="string.de">Turnus</value>
                <value type="string.hu">Turnus</value>
                <value type="string.pl">Plan Pracy</value>
                <value type="string.sk">Turnus</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>for.line</key>
                <type>localized.string</type>
                <value type="string">for line</value>
                <value type="string.bg">за линия</value>
                <value type="string.cs">pro trať</value>
                <value type="string.de">für Strecke</value>
                <value type="string.hu">Vonal</value>
                <value type="string.pl">dla linii</value>
                <value type="string.sk">pre trať</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>column.train</key>
                <type>localized.string</type>
                <value type="string">Train</value>
                <value type="string.bg">Влак</value>
                <value type="string.cs">Vlak</value>
                <value type="string.de">Zug</value>
                <value type="string.hu">Vonat</value>
                <value type="string.pl">Pociąg</value>
                <value type="string.sk">Vlak</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>column.departure</key>
                <type>localized.string</type>
                <value type="string">Departure</value>
                <value type="string.bg">Заминава</value>
                <value type="string.cs">Odjezd</value>
                <value type="string.de">Abfahrt</value>
                <value type="string.hu">Indulás</value>
                <value type="string.pl">Odjazd</value>
                <value type="string.sk">Odjazd</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>column.note</key>
                <type>localized.string</type>
                <value type="string">Note</value>
                <value type="string.bg">Забележка</value>
                <value type="string.cs">Poznámka</value>
                <value type="string.de">Bemerkung</value>
                <value type="string.hu">Megjegyzés</value>
                <value type="string.pl">Uwagi</value>
                <value type="string.sk">Poznámka</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>move.to.station</key>
                <type>localized.string</type>
                <value type="string">move to station</value>
                <value type="string.bg">преместване на гара</value>
                <value type="string.cs">přesun do stanice</value>
                <value type="string.de">Transfer zum Bahnhof</value>
                <value type="string.hu">Mozgatás állomásra</value>
                <value type="string.pl">przesuń do stacji</value>
                <value type="string.sk">presun do stanice</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>list.train.title</key>
                <type>localized.string</type>
                <value type="string">Trains for this driver circulation</value>
                <value type="string.bg">Влакове за циркулации на този машинист</value>
                <value type="string.cs">V tomto turnusu vede strojvedoucí vlak v úseku</value>
                <value type="string.de">In diesem Turnus führt Lokführer der Zug auf dem Abschnitt</value>
                <value type="string.hu">Ebben a fordában mozdonyvezető csak az alábbi útvonalon vezet</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>train.timetable</key>
                <type>localized.string</type>
                <value type="string">Timetable</value>
                <value type="string.bg">Разписание</value>
                <value type="string.cs">Sešitový jízdní řád</value>
                <value type="string.de">Buchfahrplan</value>
                <value type="string.hu">Szolgálati menetrend</value>
                <value type="string.pl">Rozklad jazdy pociągów</value>
                <value type="string.sk">Zošitový cestovný poriadok</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>column.from.to</key>
                <type>localized.string</type>
                <value type="string">From - To</value>
                <value type="string.bg">От - До</value>
                <value type="string.cs">Nástup - Konec</value>
                <value type="string.de">Aus - Nach</value>
                <value type="string.hu">Honnan - Hova</value>
                <value type="string.pl">Z - Do</value>
                <value type="string.sk">Z - Do</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>freight</key>
                <type>localized.string</type>
                <value type="string">Show freight for first station</value>
                <value type="string.cs">Zobrazit náklad. dopravu</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>title.page</key>
                <type>localized.string</type>
                <value type="string">Title page</value>
                <value type="string.cs">Titulní stránka</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>two.sides</key>
                <type>localized.string</type>
                <value type="string">Two sides printing</value>
                <value type="string.cs">Oboustranný tisk</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>engine.left</key>
                <type>localized.string</type>
                <value type="string">Engine on the left side</value>
                <value type="string.cs">Lokomotiva vlevo</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>title.page</key>
                <value type="boolean">true</value>
                <category>settings</category>
            </attribute>
            <attribute>
                <key>two.sides</key>
                <value type="boolean">true</value>
                <category>settings</category>
            </attribute>
            <attribute>
                <key>freight</key>
                <value type="boolean">true</value>
                <category>settings</category>
            </attribute>
            <attribute>
                <key>engine.left</key>
                <value type="boolean">true</value>
                <category>settings</category>
            </attribute>
        </attributes>
    </output_template>
</library_item>
