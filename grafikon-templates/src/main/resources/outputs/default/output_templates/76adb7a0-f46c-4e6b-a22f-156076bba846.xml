<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<library_item type="OUTPUT_TEMPLATE">
    <attributes/>
    <output_template>
        <id>76adb7a0-f46c-4e6b-a22f-156076bba846</id>
        <template>
            <template>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;%
  // definition of constants
  HEIGHT = 199
  ROW_COUNT = 1
  COLUMN_COUNT = 6

  TRAIN_RIGHT = "&amp;#10704;"
  TRAIN_LEFT = "&amp;#10703;"

  freightCapacity = settings['freight.capacity']
  engineLeft = settings['engine.left']

  def borderTrain() {'border="solid .3mm black"'}
  def delimiter() {'solid .3mm black'}
  def delimiterThin() {'solid .1mm black'}

  def getCycles(interval, type) {
    def cycles = interval.train.getCycleItemsForInterval(type, interval)
    return cycles.collect{i -&gt; "&lt;block&gt;${i.cycle.name}${getCycleDescription(i.cycle)}&lt;/block&gt;"}.join('')
  }

  def getCycleDescription(cycle) {
    def desc = null
    if (cycle.type == diagram.engineCycleType) {
      desc = net.parostroj.timetable.utils.TransformUtil.getEngineCycleDescription(cycle)
    } else {
      desc = cycle.description
    }
    return desc == null ? "" : " (${desc})"
  }

  def getFreight(interval, loc) {
    def fl = []
    if (interval.first &amp;&amp; interval.freight) {
      def freightDests = diagram.freightNet.connectionStrategy.getFreightToNodes(interval)
      fl = util.freight.freightListToString(freightDests, loc, { c,s -&gt; (freightCapacity &amp;&amp; c.to.node?.freightCapacity) ? "${s}[${c.to.node.freightCapacity}]" as String : s})
      if (engineLeft) fl = fl.reverse()
    }
    return fl.empty ? "" : (engineLeft ? "${TRAIN_LEFT} ${fl.join(', ')}" : "${fl.join(', ')} ${TRAIN_RIGHT}")
  }

  def getLength(interval) {
    def train = interval.train
    return net.parostroj.timetable.actions.TrainsHelper.getLengthFromTo(train.startNode, train.endNode, train)
  }

  def getLengthUnit(loc) {
    def unit = diagram.attributes['length.unit']
    return unit == net.parostroj.timetable.model.units.LengthUnit.AXLE ? " ${localization['length.axles'].translate(loc)}" : unit.getUnitsOfString(loc)
  }

  class NT {
    def interval
    def ind
    def cnt

    NT(interval, ind, cnt) {
      this.interval = interval
      this.ind = ind
      this.cnt = cnt
    }
  }

  def trains = []
  for (node in diagram.net.nodes) {
    if (node.type == net.parostroj.timetable.model.NodeType.STATION_HIDDEN) {
      def list = new net.parostroj.timetable.model.TimeIntervalList()
      for (interval in node) {
        if (interval.first) {
          list.addIntervalForRouteSegmentWithoutCheck(interval)
        }
      }
      def cnt = list.size()
      def ind = 1
      for (i in list) {
        trains &lt;&lt; new NT(i, ind++, cnt)
      }
    }
  }
%&gt;

&lt;root xmlns="http://www.w3.org/1999/XSL/Format"&gt;
&lt;layout-master-set&gt;
  &lt;simple-page-master master-name="simpleA4-portrait" page-height="21cm" page-width="29.7cm" margin=".5cm .5cm .5cm .5cm"
      line-stacking-strategy="font-height" line-height-shift-adjustment="disregard-shifts"&gt;
    &lt;region-body /&gt;
  &lt;/simple-page-master&gt;
&lt;/layout-master-set&gt;
&lt;page-sequence master-reference="simpleA4-portrait" font-family="SansCondensed"&gt;
  &lt;flow flow-name="xsl-region-body"&gt;
  &lt;% printTrains(trains) %&gt;
  &lt;/flow&gt;
&lt;/page-sequence&gt;
&lt;/root&gt;
&lt;%
def printTrains(trains) {
  Iterator iterator = trains.iterator();
  count = 0;
  while(true) {
%&gt;
&lt;block font-size="3mm"&gt;
&lt;table border-collapse="separate" border-separation=".2mm" table-layout="fixed" width="100%"&gt;
&lt;% for (ind in 1..COLUMN_COUNT) { %&gt;
    &lt;table-column column-width="${100/COLUMN_COUNT}%"/&gt;
&lt;% } %&gt;
    &lt;table-body&gt;
        &lt;table-row height="${HEIGHT}mm"&gt;&lt;%
      def countInRow = 0
      def ti = null
      while (true) {
        if (iterator.hasNext()) {
          ti = iterator.next()
        } else {
          ti = null;
        }
        if (ti != null) {
          %&gt;
    &lt;table-cell ${borderTrain()}&gt;
      &lt;% print_train(ti) %&gt;
    &lt;/table-cell&gt;&lt;%
        } else {
          %&gt;
    &lt;table-cell&gt;&lt;block&gt;&lt;/block&gt;&lt;/table-cell&gt;&lt;%
        }
        countInRow++;
        if (countInRow == COLUMN_COUNT)
          break;
      }
    %&gt;
    &lt;/table-row&gt;
    &lt;/table-body&gt;
&lt;/table&gt;
&lt;/block&gt;
&lt;%
    if (!iterator.hasNext())
      break;
    count++;
    if (count % ROW_COUNT == 0) {
      // page break if needed
    }
  }
}

def print_train(nt) {
  def interval = nt.interval
  def train = interval.train
  def loc = util.getLocaleForNode(interval.owner, locale)
  def freight = getFreight(interval, loc)
  def length = getLength(interval)
  def lengthUnit = getLengthUnit(loc)
  def isLength = freight || ( train?.type ? train.type.attributes['weight.info'] : false) || train.getCycles(diagram.trainUnitCycleType)
%&gt;
&lt;block-container height="${HEIGHT/2}mm" border-bottom="${delimiter()}"&gt;
&lt;block-container margin=".8mm" height="${HEIGHT/2 - 1.6}mm" reference-orientation="180"&gt;
&lt;block margin-top=".5mm" text-align="right" font-size="2.5mm"&gt;${nt.ind}/${nt.cnt}&lt;/block&gt;
&lt;block font-size="4.5mm" border-bottom="${delimiter()}" space-after=".8mm" space-before=".5mm"&gt;${train.name.translate(loc)} (${diagram.timeConverter.convertIntToText(train.startTime)})&lt;/block&gt;
&lt;block font-size="3.7mm" space-after=".7mm" border-bottom="${delimiterThin()}"&gt;${train.startNode} - ${train.endNode}&lt;/block&gt;
&lt;block&gt;${getCycles(interval, diagram.engineCycleType)}&lt;/block&gt;
&lt;block&gt;${getCycles(interval, diagram.trainUnitCycleType)}&lt;/block&gt;
&lt;% if (freight) { %&gt;&lt;block margin-top=".5mm" border-top="${delimiterThin()}" padding-top=".7mm"&gt;${freight}&lt;/block&gt;&lt;% } %&gt;
&lt;% if (isLength &amp;&amp; length) { %&gt;&lt;block margin-top=".5mm" border-top="${delimiterThin()}" padding-top=".7mm"&gt;${length} ${lengthUnit}&lt;/block&gt;&lt;% } %&gt;
&lt;block&gt;&lt;/block&gt;
&lt;/block-container&gt;
&lt;/block-container&gt;
&lt;block-container margin=".8mm"&gt;
&lt;block margin-top=".5mm" text-align="right" font-size="2.5mm"&gt;${nt.ind}/${nt.cnt}&lt;/block&gt;
&lt;block font-size="4.5mm" border-bottom="${delimiter()}" space-after=".8mm" space-before=".5mm"&gt;${train.name.translate(loc)} (${diagram.timeConverter.convertIntToText(train.startTime)})&lt;/block&gt;
&lt;block font-size="3.7mm" space-after=".7mm" border-bottom="${delimiterThin()}"&gt;${train.startNode} - ${train.endNode}&lt;/block&gt;
&lt;block&gt;${getCycles(interval, diagram.engineCycleType)}&lt;/block&gt;
&lt;block&gt;${getCycles(interval, diagram.trainUnitCycleType)}&lt;/block&gt;
&lt;% if (freight) { %&gt;&lt;block margin-top=".5mm" border-top="${delimiterThin()}" padding-top=".7mm"&gt;${freight}&lt;/block&gt;&lt;% } %&gt;
&lt;% if (isLength &amp;&amp; length) { %&gt;&lt;block margin-top=".5mm" border-top="${delimiterThin()}" padding-top=".7mm"&gt;${length} ${lengthUnit}&lt;/block&gt;&lt;% } %&gt;
&lt;/block-container&gt;
&lt;%
}
%&gt;
</template>
            <language>GROOVY</language>
        </template>
        <attributes>
            <attribute>
                <key>name</key>
                <type>localized.string</type>
                <value type="string">Cards for starting trains in hidden stations (large)</value>
                <value type="string.cs">Kartičky pro vlaky začínající ve skrytých stanicích (velké)</value>
            </attribute>
            <attribute>
                <key>key</key>
                <value type="string">trains_hidden_large</value>
            </attribute>
            <attribute>
                <key>output.type</key>
                <value type="string">diagram</value>
            </attribute>
            <attribute>
                <key>output</key>
                <value type="string">pdf.groovy</value>
            </attribute>
            <attribute>
                <key>description</key>
                <type>localized.string</type>
                <value type="string">PDF: Cards for starting trains in hidden stations
Can be folded and put on train</value>
                <value type="string.cs">PDF: Kartičky pro vlaky začínající ve skrytých stanicích
Dají se přehnout a umístit na vlak</value>
            </attribute>
            <attribute>
                <key>length.axles</key>
                <type>localized.string</type>
                <value type="string">axles</value>
                <value type="string.bg">оси</value>
                <value type="string.cs">náprav</value>
                <value type="string.de">Achsen</value>
                <value type="string.hu">tengelyszám</value>
                <value type="string.pl">osi</value>
                <value type="string.sk">náprav</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>freight.capacity</key>
                <type>localized.string</type>
                <value type="string">Show freight capacity</value>
                <value type="string.cs">Zobrazit kapacitu náklad. dopravy</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>engine.left</key>
                <type>localized.string</type>
                <value type="string">Engine on the left side</value>
                <value type="string.cs">Lokomotiva vlevo</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>freight.capacity</key>
                <value type="boolean">true</value>
                <category>settings</category>
            </attribute>
            <attribute>
                <key>engine.left</key>
                <value type="boolean">true</value>
                <category>settings</category>
            </attribute>
        </attributes>
    </output_template>
</library_item>
