<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<library_item type="OUTPUT_TEMPLATE">
    <attributes/>
    <output_template>
        <id>329dca63-e3da-4fbc-a9d5-5199c720487a</id>
        <template>
            <template>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;%

SPACE = "&amp;#160;"
TRAIN_RIGHT = "&amp;#10704;"
TRAIN_LEFT = "&amp;#10703;"
RIGHT_ARROW = "&amp;#8594;"
FC_WIDTH = settings["first.column.width"]
ENGINE_LEFT = settings['engine.left']
FREIGHT_END = settings['freight.end']

def border() {"border=\"solid .3mm black\""}
def padding() {"padding=\".4mm .6mm .1mm 0.6mm\""}

def evaluateString(str) {
    evaluate '"' + str + '"'
}

def emptyRow(data) {
  if (data) {
    %&gt;&lt;table-row&gt;&lt;table-cell&gt;&lt;block font-size=".2mm"&gt;${SPACE}&lt;/block&gt;&lt;/table-cell&gt;&lt;table-cell&gt;&lt;block&gt;&lt;/block&gt;&lt;/table-cell&gt;&lt;/table-row&gt;&lt;%
  }
}

def emphRegion(current, region) {
    if (current.regionHierarchy.findInRegions{r -&gt; r == region}.present) {
        return "&lt;inline font-weight=\"bold\"&gt;${region.name}&lt;/inline&gt;"
    }
    return region.name
}

def emphNode(current, node) {
    def name = node.name
    if (current == node) {
        name = "&lt;inline font-weight=\"bold\"&gt;${name}&lt;/inline&gt;"
    }
    if (node.centerOfRegions) {
        name = "&lt;inline font-style=\"italic\"&gt;${name}&lt;/inline&gt;"
    }
    return name
}

%&gt;
&lt;root xmlns="http://www.w3.org/1999/XSL/Format"&gt;
  &lt;layout-master-set&gt;
    &lt;simple-page-master master-name="simpleA4" page-height="29.7cm" page-width="21cm" margin-top="1.5cm" margin-bottom="1.5cm" margin-left="1.5cm" margin-right="1.5cm"&gt;
      &lt;region-body/&gt;
    &lt;/simple-page-master&gt;
  &lt;/layout-master-set&gt;
  &lt;page-sequence master-reference="simpleA4" font-family="SansCondensed" font-size="3mm"&gt;
    &lt;flow flow-name="xsl-region-body"&gt;
      &lt;% generate(nodes) %&gt;
      &lt;% if (!nodes) { %&gt;&lt;block&gt;&lt;/block&gt;&lt;% } %&gt;
    &lt;/flow&gt;
  &lt;/page-sequence&gt;
&lt;/root&gt;
&lt;%
def generate(nodes) {
  def generated = false
  for (node in nodes) {
    def loc = util.getLocaleForNode(node, locale)
    def collator = util.getCollator(loc)
    def analyser = util.freight.createAnalyser(diagram)
    def freightResult = analyser.getNodeFreightFrom(node)
    def freightColors = node.freightColors
    if (!freightResult.connections) continue %&gt;
    generated = true
    &lt;block break-before="page" font-size="5.5mm" font-weight="bold" text-align="center" space-after="${freightColors ? '0.0' : '2.5'}mm" font-family="Sans"&gt;${node.name}&lt;/block&gt;
    &lt;% if (freightColors) { %&gt;
    &lt;block font-size="3.5mm" font-weight="bold" text-align="center" space-after="2.5mm" font-family="Sans"&gt;[${util.freight.sortFreightColors(freightColors).collect{c -&gt; c.getName(loc).replaceAll(' ',SPACE)}.join(', ')}]&lt;/block&gt;
    &lt;% } %&gt;
    &lt;% if (freightResult.connections) { %&gt;
    &lt;block font-size="3.75mm" font-weight="bold" space-after=".25mm"&gt;${localization["stations"].translate(loc)}&lt;/block&gt;
    &lt;table ${border()} border-collapse="collapse" table-layout="fixed" width="100%"&gt;
      &lt;table-column column-width="${FC_WIDTH}%" ${border()} /&gt;
      &lt;table-column column-width="${100 - FC_WIDTH}%" ${border()} /&gt;
      &lt;table-body&gt;&lt;%
        def sortedDirect = freightResult.nodeConnections.findAll{fc -&gt; fc.to.visible}.sort{a,b -&gt; collator.compare(a.to.node.toString(), b.to.node.toString())}
        def data = false
        for (freight in sortedDirect) { %&gt;
        &lt;table-row ${border()}&gt;&lt;%
            data = true
            def trains = util.freight.intervalsToString(diagram, freight.transport.trains, loc) %&gt;
            &lt;table-cell ${padding()}&gt;&lt;block text-align-last="justify"&gt;${util.freight.freightNodeToString(freight.to, loc, false)}&lt;leader leader-pattern="space" /&gt;${freight.to.node.freightCapacity ?: ""}&lt;/block&gt;&lt;/table-cell&gt;
            &lt;table-cell ${padding()}&gt;&lt;block&gt;${trains.collect{s -&gt; s.replaceAll(' ',SPACE)}.join(', ')}&lt;/block&gt;&lt;/table-cell&gt;
        &lt;/table-row&gt;&lt;%
        }
        def sortedRegions = freightResult.regionConnections.sort{a,b -&gt;
                collator.compare(util.freight.freightRegionsToString(a.to, loc).join(","), util.freight.freightRegionsToString(b.to, loc).join(","))}
        emptyRow(data &amp;&amp; sortedRegions)
        for (freight in sortedRegions) { %&gt;
        &lt;table-row ${border()}&gt;&lt;%
            data = true
            def transport = freight.transport
            def transportList = util.freight.transportToString(diagram, transport, loc) %&gt;
            &lt;table-cell ${padding()}&gt;&lt;block font-style="italic"&gt;${util.freight.regionsToString(freight.to.regions, loc).join(', ')}&lt;/block&gt;&lt;/table-cell&gt;
            &lt;table-cell ${padding()}&gt;&lt;block&gt;${transportList.collect{s -&gt; s.replaceAll(' ',SPACE)}.join(', ')}&lt;/block&gt;&lt;/table-cell&gt;
        &lt;/table-row&gt;&lt;%
        }
        def colors = freightResult.freightColorConnections
        emptyRow(data &amp;&amp; colors)
        for (freight in colors) { %&gt;
        &lt;table-row ${border()}&gt;&lt;%
            def transport = freight.transport
            def transportList = util.freight.transportToString(diagram, transport, loc) %&gt;
            &lt;table-cell ${padding()}&gt;&lt;block font-style="italic"&gt;${util.freight.freightColorsToString(freight.to, loc).join(", ")}&lt;/block&gt;&lt;/table-cell&gt;
            &lt;table-cell ${padding()}&gt;&lt;block&gt;${transportList.collect{s -&gt; s.replaceAll(' ',SPACE)}.join(', ')}&lt;/block&gt;&lt;/table-cell&gt;
        &lt;/table-row&gt;&lt;%
        } %&gt;
      &lt;/table-body&gt;
    &lt;/table&gt;
    &lt;block space-before=".5mm" space-after="2mm"&gt;&lt;inline font-weight="bold"&gt;${localization["note"].translate(loc)}:&lt;/inline&gt; ${evaluateString(localization["note.capacity.text"].translate(loc))}&lt;/block&gt;&lt;%
    // filter freight notes
    def notes = sortedDirect.findAll { f -&gt; f.to.node.freightNote }
    if (notes) { %&gt;
    &lt;block font-size="3.75mm" font-weight="bold" space-after=".25mm"&gt;${localization["notes"].translate(loc)}&lt;/block&gt;
    &lt;table ${border()} border-collapse="collapse" table-layout="fixed" width="100%"&gt;
      &lt;table-column column-width="${FC_WIDTH}%" ${border()} /&gt;
      &lt;table-column column-width="${100 - FC_WIDTH}%" ${border()} /&gt;
      &lt;table-body&gt;&lt;%
        for (fn in notes) { %&gt;
        &lt;table-row ${border()}&gt;
          &lt;table-cell ${padding()}&gt;&lt;block&gt;${util.freight.freightNodeToString(fn.to, loc, false)}&lt;/block&gt;&lt;/table-cell&gt;
          &lt;table-cell ${padding()}&gt;&lt;block&gt;${fn.to.node.freightNote.translate(loc) ?: ""}&lt;/block&gt;&lt;/table-cell&gt;
        &lt;/table-row&gt;&lt;% 
        } %&gt;
      &lt;/table-body&gt;
    &lt;/table&gt;&lt;%
    } %&gt;
    &lt;block font-size="3.75mm" font-weight="bold" space-after=".25mm" space-before="2.5mm"&gt;${localization["sorting"].translate(loc)}&lt;/block&gt;
    &lt;table ${border()} border-collapse="collapse" table-layout="fixed" width="100%"&gt;
      &lt;table-column column-width="12.5%" ${border()} /&gt;
      &lt;table-column column-width="5.5%" ${border()} /&gt;
      &lt;table-column column-width="82%" ${border()} /&gt;
      &lt;table-body&gt;&lt;%
        def intervals = analyser.getFreightIntervalsFrom(node)
        def trainData = false
        for (i in intervals) { %&gt;
        &lt;table-row ${border()}&gt;&lt;%
            trainData = true
            def dests = diagram.freightNet.connectionStrategy.getFreightToNodes(i)
            def freightList = util.freight.freightListToString(dests, loc)
            if (FREIGHT_END) freightList = freightList.reverse() %&gt;
            &lt;table-cell ${padding()}&gt;&lt;block&gt;${i.train.name.translate(loc).replaceAll(' ', SPACE)}&lt;/block&gt;&lt;/table-cell&gt;
            &lt;table-cell ${padding()} text-align="right"&gt;&lt;block&gt;${diagram.timeConverter.convertIntToText(i.end)}&lt;/block&gt;&lt;/table-cell&gt;
            &lt;% if (ENGINE_LEFT) { %&gt;
            &lt;table-cell ${padding()}&gt;&lt;block&gt;${TRAIN_LEFT} ${freightList.reverse().collect{s -&gt; s.replaceAll(' ', SPACE)}.join(', ')}&lt;/block&gt;&lt;/table-cell&gt;
            &lt;% } else { %&gt;
            &lt;table-cell ${padding()}&gt;&lt;block&gt;${freightList.collect{s -&gt; s.replaceAll(' ', SPACE)}.join(', ')} ${TRAIN_RIGHT}&lt;/block&gt;&lt;/table-cell&gt;
            &lt;% } %&gt;
        &lt;/table-row&gt;&lt;%
        }
        def tuIntervals = analyser.getFreightTrainUnitIntervals(node)
        emptyRow(trainData &amp;&amp; tuIntervals)
        for (tu in tuIntervals) { %&gt;
        &lt;table-row ${border()}&gt;&lt;%
            def tus = util.freight.intervalFreightTrainUnitToString(diagram, tu) %&gt;
            &lt;table-cell ${padding()}&gt;&lt;block&gt;${tu.train.name.translate(loc).replaceAll(' ', SPACE)}&lt;/block&gt;&lt;/table-cell&gt;
            &lt;table-cell ${padding()} text-align="right"&gt;&lt;block&gt;${diagram.timeConverter.convertIntToText(tu.end)}&lt;/block&gt;&lt;/table-cell&gt;
            &lt;table-cell ${padding()}&gt;&lt;block&gt;${tus.collect{s -&gt; s.replaceAll(' ', SPACE)}.join(', ')}&lt;/block&gt;&lt;/table-cell&gt;
        &lt;/table-row&gt;&lt;%
        } %&gt;
      &lt;/table-body&gt;
    &lt;/table&gt;
    &lt;block space-before=".5mm" space-after="2mm"&gt;&lt;inline font-weight="bold"&gt;${localization["note"].translate(loc)}:&lt;/inline&gt; ${evaluateString(localization[ENGINE_LEFT ? "note.text.left" : "note.text"].translate(loc))}&lt;/block&gt;
    &lt;%
    def comparator = {a,b -&gt; collator.compare(a.name,b.name)}
    def regions = diagram.net.regions.findAll{r -&gt; !r.subRegions}.sort(comparator)
    def superRegions = diagram.net.regions.findAll{r -&gt; r.subRegions}.sort(comparator)
    if (regions || superRegions) { %&gt;
        &lt;table ${border()} border-collapse="collapse" table-layout="fixed" width="100%" space-after="3mm"&gt;
          &lt;table-column column-width="${FC_WIDTH}%" ${border()} /&gt;
          &lt;table-column column-width="${100 - FC_WIDTH}%" ${border()} /&gt;
          &lt;table-body&gt;&lt;%
        for (region in regions) { %&gt;
        &lt;table-row ${border()}&gt;
          &lt;table-cell ${padding()}&gt;&lt;block&gt;${emphRegion(node,region)}&lt;/block&gt;&lt;/table-cell&gt;
          &lt;table-cell ${padding()}&gt;&lt;block&gt;${region.nodes.sort(comparator).findAll{n -&gt; n.type.freight}.collect{n -&gt; emphNode(node, n)}.join(', ')}&lt;/block&gt;&lt;/table-cell&gt;
        &lt;/table-row&gt;&lt;%
        }
        emptyRow(!regions.empty &amp;&amp; !superRegions.empty)
        for (region in superRegions) { %&gt;
        &lt;table-row ${border()}&gt;
          &lt;table-cell ${padding()}&gt;&lt;block&gt;${emphRegion(node,region)}&lt;/block&gt;&lt;/table-cell&gt;
          &lt;table-cell ${padding()}&gt;&lt;block&gt;${region.subRegions.sort(comparator).collect{r -&gt; emphRegion(node, r)}.join(', ')}&lt;/block&gt;&lt;/table-cell&gt;
        &lt;/table-row&gt;&lt;%
        } %&gt;
          &lt;/table-body&gt;
        &lt;/table&gt;&lt;%
    }
    def colorCenters = diagram.net.regions.findAll{r -&gt; r.freightColorRegion}.sort(comparator)
    if (colorCenters.collect{c -&gt; c.freightColorMap.keySet()}.flatten()) { %&gt;
        &lt;table ${border()} border-collapse="collapse" table-layout="fixed" width="100%"&gt;
          &lt;table-column column-width="10%" ${border()} /&gt;
          &lt;table-column column-width="90%" ${border()} /&gt;
          &lt;table-body&gt;&lt;%
        for (region in colorCenters) {
            for (entry in region.freightColorMap) { %&gt;
            &lt;table-row ${border()}&gt;
              &lt;table-cell ${padding()}&gt;&lt;block&gt;${entry.key.getName(loc)}&lt;/block&gt;&lt;/table-cell&gt;
              &lt;table-cell ${padding()}&gt;&lt;block&gt;${emphRegion(node,region)} ${RIGHT_ARROW} ${emphRegion(node,entry.value)}&lt;/block&gt;&lt;/table-cell&gt;
            &lt;/table-row&gt;&lt;%
            }
        } %&gt;
          &lt;/table-body&gt;
        &lt;/table&gt;&lt;%
    }
    %&gt;
    &lt;% } %&gt;
  &lt;!--block break-after="page"/--&gt;
  &lt;% } %&gt;
  &lt;% if (!generated) { %&gt;&lt;block&gt;&lt;/block&gt;&lt;% } %&gt;
&lt;% } %&gt;
</template>
            <language>GROOVY</language>
        </template>
        <script>
            <source_code>import net.parostroj.timetable.actions.*
import net.parostroj.timetable.model.*

def nodes = selection == null ? diagram.net.nodes : selection
nodes = nodes.findAll{n -&gt; n.type.freight}

if (settings['one.file']) {
    nodes = ElementSort.sort(nodes, new NodeComparator())
    outputs.create().setName("${key}.pdf").setContext(["nodes" : nodes]);
} else {
    for (station in nodes) {
        outputs
            .create()
            .setName("${station.name}.pdf")
            .setContext(["nodes":[station]])
            .setDirectory(key)
    }
}
</source_code>
            <language>GROOVY</language>
        </script>
        <attributes>
            <attribute>
                <key>name</key>
                <type>localized.string</type>
                <value type="string">Freight information, train sorting</value>
                <value type="string.cs">Výpis do stanice s informacemi o nákladní dopravě, řazení vlaků</value>
            </attribute>
            <attribute>
                <key>key</key>
                <value type="string">freight</value>
            </attribute>
            <attribute>
                <key>output.type</key>
                <value type="string">diagram</value>
            </attribute>
            <attribute>
                <key>output</key>
                <value type="string">pdf.groovy</value>
            </attribute>
            <attribute>
                <key>description</key>
                <type>localized.string</type>
                <value type="string">PDF: Freight information, train sorting</value>
                <value type="string.cs">PDF: Výpis do stanice s informacemi o nákladní dopravě
Řazení vlaků</value>
            </attribute>
            <attribute>
                <key>selection.type</key>
                <value type="string">node</value>
            </attribute>
            <attribute>
                <key>stations</key>
                <type>localized.string</type>
                <value type="string">List of stations with freight trains</value>
                <value type="string.cs">Seznam stanic s vlaky pro přepravu nákladů</value>
                <value type="string.hu">Áruforgalomra megnyitott szolgálati helyek listája</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>sorting</key>
                <type>localized.string</type>
                <value type="string">Sorting of freight trains</value>
                <value type="string.cs">Řazení nákladních vlaků</value>
                <value type="string.hu">Tehervonat iránycsoportok</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>note</key>
                <type>localized.string</type>
                <value type="string">Note</value>
                <value type="string.cs">Poznámka</value>
                <value type="string.hu">Megjegyzés</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>note.text</key>
                <type>localized.string</type>
                <value type="string">[end of train] the nearest station,...,the most distant station ${TRAIN_RIGHT} [engine]</value>
                <value type="string.cs">[konec vlaku] nejbližší stanice,...,nejvzdálenější stanice ${TRAIN_RIGHT} [lokomotiva]</value>
                <value type="string.hu">[vonat vége] a legközelebbi állomáson,..., a legtávolabbi ${TRAIN_RIGHT} [gép]</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>one.file</key>
                <type>localized.string</type>
                <value type="string">Output in one file</value>
                <value type="string.cs">Výstup v jednom souboru</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>note.capacity.text</key>
                <type>localized.string</type>
                <value type="string">[name of the station] [freight capacity in axles]</value>
                <value type="string.cs">[jméno stanice] [kapacita nákladních vozů v nápravách]</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>freight.notes</key>
                <type>localized.string</type>
                <value type="string">Show freight notes</value>
                <value type="string.cs">Zobrazit poznámky k nákladní dopravě</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>notes</key>
                <type>localized.string</type>
                <value type="string">Freight notes</value>
                <value type="string.cs">Poznámky k nákladní dopravě</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>note.text.left</key>
                <type>localized.string</type>
                <value type="string">[engine] ${TRAIN_LEFT} the most distant station,...,the nearest station [end of train]</value>
                <value type="string.cs">[lokomotiva] ${TRAIN_LEFT} nejvzdálenější stanice,...,nejbližší stanice [konec vlaku]</value>
                <value type="string.hu">[gép] ${TRAIN_LEFT}  a legtávolabbi,...,a legközelebbi állomáson [vonat vége]</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>engine.left</key>
                <type>localized.string</type>
                <value type="string">Engine on the left side</value>
                <value type="string.cs">Lokomotiva vlevo</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>freight.end</key>
                <type>localized.string</type>
                <value type="string">Freight from the end of train</value>
                <value type="string.cs">Zátěž od konce vlaku</value>
                <category>localization</category>
            </attribute>
            <attribute>
                <key>one.file</key>
                <value type="boolean">true</value>
                <category>settings</category>
            </attribute>
            <attribute>
                <key>first.column.width</key>
                <value type="integer">18</value>
                <category>settings</category>
            </attribute>
            <attribute>
                <key>freight.notes</key>
                <value type="boolean">true</value>
                <category>settings</category>
            </attribute>
            <attribute>
                <key>engine.left</key>
                <value type="boolean">true</value>
                <category>settings</category>
            </attribute>
            <attribute>
                <key>freight.end</key>
                <value type="boolean">true</value>
                <category>settings</category>
            </attribute>
        </attributes>
    </output_template>
</library_item>
