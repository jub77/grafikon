/*
 * StatusBar.java
 *
 * Created on 4. září 2007, 16:54
 */
package net.parostroj.timetable.gui;

import net.parostroj.timetable.gui.components.GTEventOutputVisitor;
import net.parostroj.timetable.mediator.GTEventsReceiverColleague;
import net.parostroj.timetable.model.TrainDiagram;
import net.parostroj.timetable.model.TrainsCycleType;
import net.parostroj.timetable.model.events.GTEvent;
import net.parostroj.timetable.utils.ResourceLoader;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.Timer;

/**
 * Status bar for the application.
 *
 * @author jub
 */
public class StatusBar extends javax.swing.JPanel implements ApplicationModelListener {

    private static final int TIMEOUT = 20000;

    private final Timer timer;

    /** Creates new form StatusBar */
    public StatusBar() {
        initComponents();
        updateLeft("");
        updateCenter("");
        updateRight("");
        timer = new Timer(TIMEOUT, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                updateCenter("");
            }
        });
        timer.setRepeats(false);
    }

    public void setModel(ApplicationModel model) {
        model.getMediator().addColleague(new GTEventsReceiverColleague(true) {

            @Override
            public void processGTEventAll(GTEvent<?> event) {
                StringBuilder output = new StringBuilder();
                GTEventOutputVisitor visitor = new GTEventOutputVisitor(output, false);
                event.accept(visitor);
                updateCenter(output.toString());
            }
        });
    }

    @Override
    public void modelChanged(ApplicationModelEvent event) {
        // left
        switch (event.getType()) {
            case SET_DIAGRAM_CHANGED: case NEW_TRAIN: case DELETE_TRAIN:
                this.updateTrainCount(event.getModel().getDiagram());
                break;
            default:
                // nothing
                break;
        }
        // right
        switch (event.getType()) {
            case SET_DIAGRAM_CHANGED: case NEW_CYCLE: case DELETED_CYCLE:
                this.updateCirculations(event.getModel().getDiagram());
                break;
            default:
                // nothing
                break;
        }
    }

    private void updateCirculations(TrainDiagram diagram) {
        if (diagram == null) {
            updateLeft("");
        } else {
            int drivers = diagram.getCycles(TrainsCycleType.DRIVER_CYCLE).size();
            int engines = diagram.getCycles(TrainsCycleType.ENGINE_CYCLE).size();
            int trainUnits = diagram.getCycles(TrainsCycleType.TRAIN_UNIT_CYCLE).size();
            String text = String.format("%d, %d, %d", engines, trainUnits, drivers);
            updateLeft(text);
        }
    }

    private void updateTrainCount(TrainDiagram diagram) {
        if (diagram == null) {
            updateRight("");
        } else {
            updateRight(ResourceLoader.getString("status.bar.trains") + " " + diagram.getTrains().size());
        }
    }

    private void updateLeft(String text) {
        left.setText(text);
    }

    private void updateRight(String text) {
        right.setText(text);
    }

    private void updateCenter(String text) {
        center.setText(text);
        if (!"".equals(text)) {
            // start timer
            if (timer != null) {
                timer.stop();
                timer.setInitialDelay(TIMEOUT);
                timer.start();
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        left = new javax.swing.JTextField();
        left.setColumns(15);
        center = new javax.swing.JTextField();
        right = new javax.swing.JTextField();
        right.setColumns(15);

        left.setEditable(false);

        center.setEditable(false);

        right.setEditable(false);
        setLayout(new BorderLayout(0, 0));
        add(left, BorderLayout.WEST);
        add(center, BorderLayout.CENTER);
        add(right, BorderLayout.EAST);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField center;
    private javax.swing.JTextField left;
    private javax.swing.JTextField right;
    // End of variables declaration//GEN-END:variables

}
